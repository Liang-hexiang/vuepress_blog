import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,a as t}from"./app-ae820777.js";const e={},p=t(`<h1 id="设计模式" tabindex="-1"><a class="header-anchor" href="#设计模式" aria-hidden="true">#</a> 设计模式</h1><h2 id="单例模式" tabindex="-1"><a class="header-anchor" href="#单例模式" aria-hidden="true">#</a> 单例模式</h2><h3 id="_1-普通单例模式" tabindex="-1"><a class="header-anchor" href="#_1-普通单例模式" aria-hidden="true">#</a> 1. 普通单例模式</h3><blockquote><p>_ <em>new</em> _方法可以在实例化类的时候通过hasattr方法返回同一个实例</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">ExerciseSinglePattern</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token string">&#39;_instance&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            cls<span class="token punctuation">.</span>_instance <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">)</span>
        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>_instance

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;__init__&#39;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>a <span class="token operator">=</span> a
        self<span class="token punctuation">.</span>b <span class="token operator">=</span> b
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    sp <span class="token operator">=</span> ExerciseSinglePattern<span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span>
    sp2 <span class="token operator">=</span> ExerciseSinglePattern<span class="token punctuation">(</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>sp<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>sp2<span class="token punctuation">)</span>
    <span class="token comment"># &lt;__main__.ExerciseSinglePattern object at 0x00000243AF6E4F70&gt;</span>
	<span class="token comment"># &lt;__main__.ExerciseSinglePattern object at 0x00000243AF6E4F70&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-使用装饰器实现单例模式" tabindex="-1"><a class="header-anchor" href="#_2-使用装饰器实现单例模式" aria-hidden="true">#</a> 2. 使用装饰器实现单例模式</h3><h4 id="_2-1-装饰器-decorators" tabindex="-1"><a class="header-anchor" href="#_2-1-装饰器-decorators" aria-hidden="true">#</a> 2.1 装饰器（Decorators）</h4><blockquote><p>装饰器是Python中很重要的内容，属于Python的进阶知识；装饰器的本质可以理解为一个高阶函数，因为它返回的是一个函数对象。</p></blockquote><p>1️⃣类装饰器</p>`,9),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","设计模式(Python实现).html.vue"]]);export{d as default};
