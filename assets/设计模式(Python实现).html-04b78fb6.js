const n=JSON.parse(`{"key":"v-e4be039e","path":"/posts/python/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(Python%E5%AE%9E%E7%8E%B0).html","title":"设计模式","lang":"zh-CN","frontmatter":{"icon":"pen","date":"2023-12-06T00:00:00.000Z","cover":"https://img.tucang.cc/api/image/show/5383cab4c54b110f368ce995153f0de3","category":["python"],"tag":["Linux","python"],"description":"设计模式 单例模式 1. 普通单例模式 _ new _方法可以在实例化类的时候通过hasattr方法返回同一个实例 class ExerciseSinglePattern: def __new__(cls, *args, **kwargs): if not hasattr(cls, '_instance'): cls._instance = super().__new__(cls) return cls._instance def __init__(self, a, b): print('__init__') self.a = a self.b = b if __name__ == '__main__': sp = ExerciseSinglePattern('a', 'b') sp2 = ExerciseSinglePattern('c', 'd') print(sp) print(sp2) # &lt;__main__.ExerciseSinglePattern object at 0x00000243AF6E4F70&gt; \\t# &lt;__main__.ExerciseSinglePattern object at 0x00000243AF6E4F70&gt;","head":[["meta",{"property":"og:url","content":"https://lianghexiang.github.io/space/space/posts/python/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(Python%E5%AE%9E%E7%8E%B0).html"}],["meta",{"property":"og:title","content":"设计模式"}],["meta",{"property":"og:description","content":"设计模式 单例模式 1. 普通单例模式 _ new _方法可以在实例化类的时候通过hasattr方法返回同一个实例 class ExerciseSinglePattern: def __new__(cls, *args, **kwargs): if not hasattr(cls, '_instance'): cls._instance = super().__new__(cls) return cls._instance def __init__(self, a, b): print('__init__') self.a = a self.b = b if __name__ == '__main__': sp = ExerciseSinglePattern('a', 'b') sp2 = ExerciseSinglePattern('c', 'd') print(sp) print(sp2) # &lt;__main__.ExerciseSinglePattern object at 0x00000243AF6E4F70&gt; \\t# &lt;__main__.ExerciseSinglePattern object at 0x00000243AF6E4F70&gt;"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://img.tucang.cc/api/image/show/5383cab4c54b110f368ce995153f0de3"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-29T05:01:03.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"设计模式"}],["meta",{"property":"article:author","content":"L.H.X"}],["meta",{"property":"article:tag","content":"Linux"}],["meta",{"property":"article:tag","content":"python"}],["meta",{"property":"article:published_time","content":"2023-12-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-29T05:01:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计模式\\",\\"image\\":[\\"https://img.tucang.cc/api/image/show/5383cab4c54b110f368ce995153f0de3\\"],\\"datePublished\\":\\"2023-12-06T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-29T05:01:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"L.H.X\\",\\"url\\":\\"/intro.html\\"}]}"]]},"headers":[{"level":2,"title":"单例模式","slug":"单例模式","link":"#单例模式","children":[{"level":3,"title":"1. 普通单例模式","slug":"_1-普通单例模式","link":"#_1-普通单例模式","children":[]},{"level":3,"title":"2. 使用装饰器实现单例模式","slug":"_2-使用装饰器实现单例模式","link":"#_2-使用装饰器实现单例模式","children":[]}]}],"git":{"createdTime":1703825298000,"updatedTime":1703826063000,"contributors":[{"name":"lianghexiang","email":"lhx110396@163.com","commits":2}]},"readingTime":{"minutes":1.26,"words":378},"filePathRelative":"posts/python/设计模式(Python实现).md","localizedDate":"2023年12月6日","excerpt":"<h1> 设计模式</h1>\\n<h2> 单例模式</h2>\\n<h3> 1. 普通单例模式</h3>\\n<blockquote>\\n<p>_ <em>new</em> _方法可以在实例化类的时候通过hasattr方法返回同一个实例</p>\\n</blockquote>\\n<div class=\\"language-python line-numbers-mode\\" data-ext=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">ExerciseSinglePattern</span><span class=\\"token punctuation\\">:</span>\\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">__new__</span><span class=\\"token punctuation\\">(</span>cls<span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">*</span>args<span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">**</span>kwargs<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token keyword\\">not</span> <span class=\\"token builtin\\">hasattr</span><span class=\\"token punctuation\\">(</span>cls<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'_instance'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n            cls<span class=\\"token punctuation\\">.</span>_instance <span class=\\"token operator\\">=</span> <span class=\\"token builtin\\">super</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>__new__<span class=\\"token punctuation\\">(</span>cls<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token keyword\\">return</span> cls<span class=\\"token punctuation\\">.</span>_instance\\n\\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">__init__</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">,</span> a<span class=\\"token punctuation\\">,</span> b<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'__init__'</span><span class=\\"token punctuation\\">)</span>\\n        self<span class=\\"token punctuation\\">.</span>a <span class=\\"token operator\\">=</span> a\\n        self<span class=\\"token punctuation\\">.</span>b <span class=\\"token operator\\">=</span> b\\n<span class=\\"token keyword\\">if</span> __name__ <span class=\\"token operator\\">==</span> <span class=\\"token string\\">'__main__'</span><span class=\\"token punctuation\\">:</span>\\n    sp <span class=\\"token operator\\">=</span> ExerciseSinglePattern<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'a'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'b'</span><span class=\\"token punctuation\\">)</span>\\n    sp2 <span class=\\"token operator\\">=</span> ExerciseSinglePattern<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'c'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'d'</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span>sp<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span>sp2<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token comment\\"># &lt;__main__.ExerciseSinglePattern object at 0x00000243AF6E4F70&gt;</span>\\n\\t<span class=\\"token comment\\"># &lt;__main__.ExerciseSinglePattern object at 0x00000243AF6E4F70&gt;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
