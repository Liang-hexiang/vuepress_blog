import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as n,a as s}from"./app-44493677.js";const i={},t=s(`<h1 id="mysql知识积累" tabindex="-1"><a class="header-anchor" href="#mysql知识积累" aria-hidden="true">#</a> Mysql知识积累</h1><h3 id="mysql内置函数" tabindex="-1"><a class="header-anchor" href="#mysql内置函数" aria-hidden="true">#</a> Mysql内置函数</h3><h4 id="_1-instr" tabindex="-1"><a class="header-anchor" href="#_1-instr" aria-hidden="true">#</a> 1. instr</h4><p>简介：</p><blockquote><p>函数返回字符串中子字符串第一次出现的位置.如果在str中找不到子字符串，则INSTR()函数返回零(0)</p></blockquote><p>使用场景：</p><blockquote><p>想要在字符串中查找子字符串或检查字符串中是否存在子字符串。</p></blockquote><p>函数语法:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>INSTR<span class="token punctuation">(</span>str<span class="token punctuation">,</span>substr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>INSTR</code>函数接受两个参数：<strong>str</strong>是要搜索的字符串,<strong>substr</strong>是要搜索的子字符串。</p><h4 id="_2-substr" tabindex="-1"><a class="header-anchor" href="#_2-substr" aria-hidden="true">#</a> 2. substr</h4><p>简介：</p><blockquote><p>substr从字符串中提取特定长度的子字符串</p></blockquote><p>使用场景：</p><blockquote><p>想要通过索引截取字符串的一部分。</p></blockquote><p>函数语法：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>substr<span class="token punctuation">(</span>string string<span class="token punctuation">,</span>num <span class="token keyword">start</span><span class="token punctuation">,</span>num length<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>string为字符串；start为起始位置；length为长度。</p><p>⚠️start是从1开始的</p><h3 id="查询" tabindex="-1"><a class="header-anchor" href="#查询" aria-hidden="true">#</a> 查询</h3><h4 id="_1-1子查询" tabindex="-1"><a class="header-anchor" href="#_1-1子查询" aria-hidden="true">#</a> 1. 1子查询</h4><p>子查询指一个查询语句嵌套在另一个查询语句内部的查询，这个特性从MySQL 4.1开始引入</p><h5 id="子查询操作符" tabindex="-1"><a class="header-anchor" href="#子查询操作符" aria-hidden="true">#</a> 子查询操作符</h5><ol><li><p>ANY（SOME）</p><blockquote><p>ANY和SOME关键字是同义词，表示满足其中任一条件，它们允许创建一个表达式对子查询的返回值列表进行比较，只要满足内层子查询中的任何一个比较条件，就返回一个结果作为外层查询的条件</p></blockquote><figure><img src="https://cdn.nlark.com/yuque/0/2023/png/21881466/1680257852246-b1c2996b-aa6e-4079-a290-d35c23b2515c.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure></li><li><p>ALL</p><blockquote><p>ALL关键字与ANY和SOME不同，使用ALL时需要同时满足所有内层查询的条件。</p></blockquote><figure><img src="https://cdn.nlark.com/yuque/0/2023/png/21881466/1680257896133-1033c011-39b3-4270-8244-2afdd83a4d38.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure></li><li><p>IN</p><blockquote><p>IN关键字进行子查询时，内层查询语句仅仅返回一个数据列，这个数据列里的值将提供给外层查询语句进行比较操作。</p></blockquote><figure><img src="https://cdn.nlark.com/yuque/0/2023/png/21881466/1680258121818-4baff6c0-ea14-4415-9f9f-7e5a590379f5.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure></li><li><p>EXISTS</p><blockquote><p>EXISTS关键字后面的参数是一个任意的子查询，系统对子查询进行运算以判断它是否返回行，如果至少返回一行，那么EXISTS的结果为true，此时外层查询语句将进行查询；如果子查询没有返回任何行，那么EXISTS返回的结果是false，此时外层语句将不进行查询。</p></blockquote></li></ol><h3 id="_2-插入" tabindex="-1"><a class="header-anchor" href="#_2-插入" aria-hidden="true">#</a> 2. 插入</h3><h4 id="_2-1-ingore" tabindex="-1"><a class="header-anchor" href="#_2-1-ingore" aria-hidden="true">#</a> 2.1 ingore</h4><p>插入数据时，如果数据已经存在，则不再执行插入</p><h3 id="修改" tabindex="-1"><a class="header-anchor" href="#修改" aria-hidden="true">#</a> 修改</h3><h3 id="删除" tabindex="-1"><a class="header-anchor" href="#删除" aria-hidden="true">#</a> 删除</h3><h3 id="存储过程和函数" tabindex="-1"><a class="header-anchor" href="#存储过程和函数" aria-hidden="true">#</a> 存储过程和函数</h3><h4 id="_1-存储过程" tabindex="-1"><a class="header-anchor" href="#_1-存储过程" aria-hidden="true">#</a> 1. 存储过程</h4><h3 id="_3-地理类型" tabindex="-1"><a class="header-anchor" href="#_3-地理类型" aria-hidden="true">#</a> 3. 地理类型</h3><h5 id="_1-使用st-distance-sphere函数计算经纬度距离" tabindex="-1"><a class="header-anchor" href="#_1-使用st-distance-sphere函数计算经纬度距离" aria-hidden="true">#</a> 1. 使用<code>ST_Distance_Sphere</code>函数计算经纬度距离</h5>`,33),r=[t];function d(c,o){return e(),n("div",null,r)}const p=a(i,[["render",d],["__file","mysql备忘录.html.vue"]]);export{p as default};
