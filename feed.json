{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "#/ cd L.H.X Blog Home",
  "home_page_url": "https://lianghexiang.github.io/space/",
  "feed_url": "https://lianghexiang.github.io/space/feed.json",
  "icon": "src/.vuepress/public/images/katongrenwu.png",
  "items": [
    {
      "title": "Go语言之旅-前言",
      "url": "https://lianghexiang.github.io/space/Go/%E5%89%8D%E8%A8%80.html",
      "id": "https://lianghexiang.github.io/space/Go/%E5%89%8D%E8%A8%80.html",
      "content_html": "<h1 id=\"go语言之旅-前言\" tabindex=\"-1\"> Go语言之旅-前言</h1>\n",
      "image": "https://img.tucang.cc/api/image/show/97c5d0c0a9f9c7aae374b30ce9f16e6d",
      "date_published": "2024-04-19T00:00:00.000Z",
      "date_modified": "2024-06-24T01:38:14.000Z",
      "authors": [],
      "tags": [
        "技术",
        "Golang"
      ]
    },
    {
      "title": "GO语言的基本语法",
      "url": "https://lianghexiang.github.io/space/Go/Go%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/Go%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html",
      "id": "https://lianghexiang.github.io/space/Go/Go%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/Go%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html",
      "content_html": "<h1 id=\"go语言的基本语法\" tabindex=\"-1\"> GO语言的基本语法</h1>\n<div data-ext=\"golang\"><pre><code>package main\n\nimport &quot;fmt&quot;\n\nfunc main() {\n   fmt.Println(&quot;Hello 世界!&quot;)\n}\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>",
      "image": "https://img.tucang.cc/api/image/show/97c5d0c0a9f9c7aae374b30ce9f16e6d",
      "date_published": "2024-04-19T00:00:00.000Z",
      "date_modified": "2024-06-24T01:38:14.000Z",
      "authors": [],
      "tags": [
        "技术",
        "Golang"
      ]
    },
    {
      "title": "PySpark之parallelize()",
      "url": "https://lianghexiang.github.io/space/posts/pyspark/PySpark%E4%B9%8BParallelize.html",
      "id": "https://lianghexiang.github.io/space/posts/pyspark/PySpark%E4%B9%8BParallelize.html",
      "content_html": "<h1 id=\"pyspark之parallelize\" tabindex=\"-1\"> PySpark之parallelize()</h1>\n",
      "image": "https://img.tucang.cc/api/image/show/97c5d0c0a9f9c7aae374b30ce9f16e6d",
      "date_published": "2024-04-19T00:00:00.000Z",
      "date_modified": "2024-06-24T01:38:14.000Z",
      "authors": [],
      "tags": [
        "技术",
        "PySpark"
      ]
    },
    {
      "title": "什么是线性回归",
      "url": "https://lianghexiang.github.io/space/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/%E4%BB%80%E4%B9%88%E6%98%AF%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92.html",
      "id": "https://lianghexiang.github.io/space/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/%E4%BB%80%E4%B9%88%E6%98%AF%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92.html",
      "content_html": "<h1 id=\"什么是线性回归\" tabindex=\"-1\"> 什么是线性回归</h1>\n<h3 id=\"线性回归名字解析\" tabindex=\"-1\"> <code>线性回归</code>名字解析</h3>\n<p>想要理解线性回归，首先我们要了解这个名字。我们可以把&quot;线性回归&quot;分解成<code>线性</code>和<code>回归</code>两个部分，<strong>线性</strong>表示的是一类模型，即<code>线性模型</code>，而<strong>回归</strong>表示的是一类问题，叫做<strong>回归问题</strong>。<br>\n所以<code>线性回归</code>通俗的理解也就是'使用线性模式来解决回归问题'。</p>\n<h3 id=\"主要关注\" tabindex=\"-1\"> 主要关注</h3>\n<p>1️⃣ 回归问题</p>\n<p>2️⃣ 线性方程</p>\n<p>3️⃣偏差度量</p>\n<p>4️⃣权重更新</p>\n<i>Content not supported</i>\n<h3 id=\"回归问题\" tabindex=\"-1\"> 回归问题</h3>\n<p><strong>回归</strong>一词表示，万物的发展轨迹都不是一条单调向上或者向下的直线，而是沿着均值波动。<br>\n比如在研究中发现，如果父代身高高于平均值，则子代具有更高概率比他父亲要矮，也就是回归平均身高。</p>\n<p>那么什么是回归问题呢？回归问题的具体例子很多，简单来说各个数据点都沿着一条主轴来回波动的问题都算是回归问题。</p>\n<h3 id=\"数学解析\" tabindex=\"-1\"> 数学解析</h3>\n<h4 id=\"线性函数\" tabindex=\"-1\"> 线性函数</h4>\n<p><img src=\"https://raw.githubusercontent.com/lianghexiang/picgo-picture/main/vuepress/2024-03-30-zJRprv.png\" alt=\"\" loading=\"lazy\"><br>\n我们把上面函数中的符号逐个翻译一下：</p>\n<p><strong><span><span><i>Content not supported</i></span><span aria-hidden=\"true\"><span><span style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span><span><span><span style=\"height:0.6944em;\"><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span style=\"margin-right:0.03588em;\">y</span></span><span style=\"top:-3em;\"><span style=\"height:3em;\"></span><span style=\"left:-0.1944em;\"><span>^</span></span></span></span><span>​</span></span><span><span style=\"height:0.1944em;\"><span></span></span></span></span></span></span></span></span></strong>:</p>\n",
      "image": "https://img.tucang.cc/api/image/show/498496728f8ad787045c66c3af161ab1",
      "date_published": "2024-02-01T00:00:00.000Z",
      "date_modified": "2024-04-17T10:02:56.000Z",
      "authors": [
        {
          "name": "梁贺祥"
        }
      ],
      "tags": [
        "技术",
        "人工智能"
      ]
    },
    {
      "title": "PySpark初学者教程",
      "url": "https://lianghexiang.github.io/space/posts/pyspark/PySpark%E5%88%9D%E5%AD%A6%E8%80%85%E6%95%99%E7%A8%8B.html",
      "id": "https://lianghexiang.github.io/space/posts/pyspark/PySpark%E5%88%9D%E5%AD%A6%E8%80%85%E6%95%99%E7%A8%8B.html",
      "content_html": "<h1 id=\"pyspark初学者教程\" tabindex=\"-1\"> PySpark初学者教程</h1>\n<div>\n<p>Spark版本信息</p>\n<p>本教程以下所有内容都是基于Spark3.5版本</p>\n</div>\n<h2 id=\"_1-pyspark简介\" tabindex=\"-1\"> 1. PySpark简介</h2>\n<blockquote>\n<p>PySpark 教程 – PySpark 是一个用 Python 编写的 Apache Spark 库，用于使用 Apache Spark 功能运行 Python 应用程序。使用 PySpark 我们可以在分布式集群（多个节点）上并行运行应用程序。<br>\n换句话说，PySpark 是一个 Python API，是一个用于大规模强大的分布式数据处理和机器学习应用程序的分析处理引擎。</p>\n</blockquote>\n<figure><img src=\"https://raw.githubusercontent.com/lianghexiang/picgo-picture/main/vuepress/img.png\" alt=\"img.png\" tabindex=\"0\" loading=\"lazy\"><figcaption>img.png</figcaption></figure>\n<h3 id=\"_1-1-pyspark特点\" tabindex=\"-1\"> 1.1 PySpark特点</h3>\n<ol>\n<li>内存计算</li>\n<li>使用并行化进行分布式处理</li>\n<li>可与许多集群管理器（Spark、Yarn、Mesos 等）一起使用</li>\n<li>容错</li>\n<li>不可变的</li>\n<li>惰性评估</li>\n<li>缓存和持久化</li>\n<li>使用 DataFrame 时的内置优化</li>\n<li>支持ANSI SQL</li>\n</ol>\n<h3 id=\"_1-2-pyspark优点\" tabindex=\"-1\"> 1.2 Pyspark优点</h3>\n<ol>\n<li>PySpark 是一种通用的内存分布式处理引擎，可让您以分布式方式高效地处理数据。</li>\n<li>在 PySpark 上运行的应用程序比传统系统快 100 倍。</li>\n<li>使用 PySpark 进行数据摄取管道将给您带来巨大的好处。</li>\n<li>使用 PySpark，我们可以处理来自 Hadoop HDFS、AWS S3 和许多文件系统的数据。</li>\n<li>PySpark 还用于使用 Streaming 和 Kafka 处理实时数据。</li>\n<li>使用 PySpark 流式传输，您还可以从文件系统流式传输文件，也可以从套接字流式传输。</li>\n<li>PySpark 本身具有机器学习和图形库。</li>\n</ol>\n<h2 id=\"_2-什么是apache-spark\" tabindex=\"-1\"> 2. 什么是Apache Spark</h2>\n<p><code>Apache Spark</code>是一个用于大规模数据处理的开源统一分析引擎，以下简称Spark。Spark 被设计为快速、灵活且易于使用，使其成为处理大规模数据集的流行选择。Spark 对分布式集群上数十亿和数万亿数据的运行速度比传统应用程序快 100 倍。</p>\n<p>Spark可以运行在 单节点机器或多节点机器（集群）上。它的创建是为了 通过进行内存处理来解决MapReduce 的局限性。Spark 通过使用内存缓存来重用数据，以加速在同一数据集上重复调用函数的机器学习算法。这降低了延迟，使 Spark 比 MapReduce 快数倍，特别是在进行机器学习和交互式分析时。Apache Spark 还可以处理实时流。</p>\n<p>它也是一个 多语言引擎， 为 <code>Java</code>、<code>Scala</code>、<code>Python</code> 和 <code>R</code> 等多种编程语言提供 API（应用程序编程接口）和库，允许开发人员使用他们最熟悉的语言来使用 <code>Spark</code>。</p>\n<ul>\n<li>Scala：  Spark 的主要语言和母语是 Scala。Spark的许多核心组件都是用Scala编写的，它为Spark提供了最广泛的API。</li>\n<li>Java：  Spark 提供了 Java API，允许开发人员在 Java 应用程序中使用 Spark。Java 开发人员可以通过此 API 访问 Spark 的大部分功能。</li>\n<li>Python：  Spark 提供了一个名为 PySpark 的 Python API，它在喜欢使用 Python 进行数据分析和机器学习任务的数据科学家和开发人员中很受欢迎。PySpark 提供了一种与 Spark 交互的 Pythonic 方式。</li>\n<li>R：  Spark 还提供 R API，使 R 用户能够使用 Spark 数据并使用他们熟悉的 R 语言执行分布式数据分析。</li>\n</ul>\n<h2 id=\"_3-pyspark-架构\" tabindex=\"-1\"> 3. PySpark 架构</h2>\n<div>\n<p>pyspark架构</p>\n<p>Apache Spark 在主从架构中工作，其中主设备称为“Driver”，从设备称为“Workers”。当您运行 Spark 应用程序时，Spark Driver会创建一个上下文作为应用程序的入口点，所有操作（转换和操作）都在工作节点上执行，资源由 Cluster Manager 管理。</p>\n</div>\n<figure><img src=\"https://raw.githubusercontent.com/lianghexiang/picgo-picture/main/vuepress/2024-02-02-sk1NgN.png\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n",
      "image": "https://img.tucang.cc/api/image/show/498496728f8ad787045c66c3af161ab1",
      "date_published": "2024-02-01T00:00:00.000Z",
      "date_modified": "2024-02-02T08:44:35.000Z",
      "authors": [
        {
          "name": "梁贺祥"
        }
      ],
      "tags": [
        "技术",
        "IT"
      ]
    },
    {
      "title": "📖理解SparkSession",
      "url": "https://lianghexiang.github.io/space/posts/pyspark/SparkSession%E6%95%99%E7%A8%8B.html",
      "id": "https://lianghexiang.github.io/space/posts/pyspark/SparkSession%E6%95%99%E7%A8%8B.html",
      "content_html": "<p>🔖 自 Spark 2.0 起，SparkSession 已成为 PySpark 与 RDD 和 DataFrame 配合使用的入口点。在2.0之前，入口点曾是SparkContext。 本节内容将主要通过定义和描述如何创建 SparkSession 以及使用-shellspark中的默认 SparkSession 变量来重点解释什么是 SparkSession........</p>\n\n<h1 id=\"理解sparksession\" tabindex=\"-1\"> 📖理解SparkSession</h1>\n<h2 id=\"sparksession\" tabindex=\"-1\"> 1️⃣SparkSession</h2>\n<p>✏️在Spark2.0版本，pyspark.sql引入了一个新类<code>SparkSession</code>。SparkSession 是我们在 2.0 版本之前使用的所有不同上下文（SQLContext 和 HiveContext 等）的组合类。从 2.0 开始，SparkSession 可以用来替换 SQLContext、HiveContext 以及 2.0 之前定义的其他上下文。<br>\n✏️正如开头提到的，SparkSession 是 PySpark 的入口点，创建 SparkSession 实例将是您使用 RDD、DataFrame 和 Dataset 进行编程时编写的第一个语句。<br>\n✏️虽然 SparkContext 在 2.0 之前曾经是一个入口点，但并没有完全被 SparkSession 取代。SparkContext 的许多功能在 Spark 2.0 及更高版本中仍然可用，而且SparkSession是在内部创建了<code>SparkConfig </code>和<code>SparkContext</code>，并通过<code>SparkSession</code>来提供配置创建。</p>\n<p>SparkSession还包括其他不同上下文的API：</p>\n<ul>\n<li>SparkContext,</li>\n<li>SQLContext,</li>\n<li>StreamingContext,</li>\n<li>HiveContext.</li>\n</ul>\n<p>❓ PySpark程序中可以创建多少个SparkSession？</p>\n<pre><code>可以创建多个SparkSession。如果想要PySpark表在逻辑上分离时，就需要使用`SparkSession.builder()`或者`SparkSession.newSession()`创建多个SparkSession\n</code></pre>\n<h2 id=\"创建sparksession\" tabindex=\"-1\"> 2️⃣创建SparkSession</h2>\n<p>在PySpark程序中，需要使用构造器方法builder方法。builder方法的使用方法如下：</p>\n<div data-ext=\"py\"><pre><code><span># Create SparkSession from builder</span>\n<span>import</span> pyspark\n<span>from</span> pyspark<span>.</span>sql <span>import</span> SparkSession\nspark <span>=</span> SparkSession<span>.</span>builder<span>.</span>master<span>(</span><span>\"local[1]\"</span><span>)</span> \\\n                    <span>.</span>appName<span>(</span><span>'SparkByExamples.com'</span><span>)</span> \\\n                    <span>.</span>getOrCreate<span>(</span><span>)</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><ul>\n<li><code>master()</code>: 如果是在集群上运行程序，需要使用主机名称为参数传入master()。这个参数值通常是<code>yarn</code>或者是<code>mesos</code>，这取决于你的主节点的配置。</li>\n<li><code>local[num]</code>: 在单机模式下运行的时候使用。<code>num</code>应该是一个整数值，表示的是在使用<code>RDD</code>、<code>DataFrame</code>、<code>DataSet</code>时应该创建多少个分区。一般这个值可以是CPU核心数。</li>\n<li><code>appName()</code>: 设置应用名称</li>\n<li><code>getOrCreate()</code>: 从名字即可看出，获取或者创建SparkSession，如果已经存在则获取，否则创建新的SparkSession</li>\n</ul>\n<p><strong>创建另一个SparkSession：</strong></p>\n<div data-ext=\"py\"><pre><code><span># Create new SparkSession</span>\nspark2 <span>=</span> SparkSession<span>.</span>newSession\n<span>print</span><span>(</span>spark2<span>)</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><blockquote>\n<p>使用上面的代码会创建一个新的SparkSession，并且与现有的SparkSession使用相同的应用名称。两个会话的底层 SparkContext 是相同的，因为每个 PySpark 应用程序只能有一个上下文。</p>\n</blockquote>\n<p><strong>获取现有的SparkSession</strong></p>\n<div data-ext=\"py\"><pre><code><span># Get Existing SparkSession</span>\nspark3 <span>=</span> SparkSession<span>.</span>builder<span>.</span>getOrCreate\n<span>print</span><span>(</span>spark3<span>)</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><h2 id=\"使用-spark-配置\" tabindex=\"-1\"> 3️⃣使用 Spark 配置</h2>\n<p>可以使用<code>config</code>方法为SparkSession增加配置</p>\n<div data-ext=\"py\"><pre><code><span># 使用 config()</span>\nspark <span>=</span> SparkSession<span>.</span>builder \n      <span>.</span>master<span>(</span><span>\"local[1]\"</span><span>)</span> \n      <span>.</span>appName<span>(</span><span>\"SparkByExamples.com\"</span><span>)</span> \n      <span>.</span>config<span>(</span><span>\"spark.some.config.option\"</span><span>,</span> <span>\"config-value\"</span><span>)</span> \n      <span>.</span>getOrCreate<span>(</span><span>)</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"创建启用hive的sparksession\" tabindex=\"-1\"> 4️⃣ 创建启用Hive的SparkSession</h2>\n<blockquote>\n<p>为了将 Hive 与 PySpark 一起使用，您需要使用该enableHiveSupport()方法启用它。</p>\n</blockquote>\n<div data-ext=\"py\"><pre><code>spark <span>=</span> SparkSession<span>.</span>builder \\\n      <span>.</span>master<span>(</span><span>\"local[1]\"</span><span>)</span> \\\n      <span>.</span>appName<span>(</span><span>\"SparkByExamples.com\"</span><span>)</span> \\\n      <span>.</span>config<span>(</span><span>\"spark.sql.warehouse.dir\"</span><span>,</span> <span>\"&lt;path>/spark-warehouse\"</span><span>)</span> \\\n      <span>.</span>enableHiveSupport<span>(</span><span>)</span> \\\n      <span>.</span>getOrCreate<span>(</span><span>)</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"获取或配置pyspark-config\" tabindex=\"-1\"> 5️⃣ 获取或配置PySpark Config</h2>\n<blockquote>\n<p>创建 SparkSession 后，您可以在运行时添加 Spark 配置或获取所有配置。</p>\n</blockquote>\n<div data-ext=\"py\"><pre><code><span># Set Config</span>\nspark<span>.</span>conf<span>.</span><span>set</span><span>(</span><span>\"spark.executor.memory\"</span><span>,</span> <span>\"5g\"</span><span>)</span>\n\n<span># Get a Spark Config</span>\npartitions <span>=</span> spark<span>.</span>conf<span>.</span>get<span>(</span><span>\"spark.sql.shuffle.partitions\"</span><span>)</span>\n<span>print</span><span>(</span>partitions<span>)</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"简单创建dataframe\" tabindex=\"-1\"> 6️⃣ 简单创建DataFrame</h2>\n<p>使用<code>createDataFrame</code>创建DataFrame</p>\n<div data-ext=\"py\"><pre><code><span># Create DataFrame</span>\ndf <span>=</span> spark<span>.</span>createDataFrame<span>(</span>\n    <span>[</span><span>(</span><span>\"Scala\"</span><span>,</span> <span>25000</span><span>)</span><span>,</span> <span>(</span><span>\"Spark\"</span><span>,</span> <span>35000</span><span>)</span><span>,</span> <span>(</span><span>\"PHP\"</span><span>,</span> <span>21000</span><span>)</span><span>]</span><span>)</span>\ndf<span>.</span>show<span>(</span><span>)</span>\n\n<span># Output</span>\n<span>#+-----+-----+</span>\n<span>#|   _1|   _2|</span>\n<span>#+-----+-----+</span>\n<span>#|Scala|25000|</span>\n<span>#|Spark|35000|</span>\n<span>#|  PHP|21000|</span>\n<span>#+-----+-----+</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>🔗 <a href='https://sparkbyexamples.com/pyspark/different-ways-to-create-dataframe-in-pyspark/'>其他创建DataFrame的方法</a></p>\n<p>、</p>\n",
      "image": "https://img.tucang.cc/api/image/show/da3546c26f3726a1f7a63e96921b30ff",
      "date_published": "2024-02-01T00:00:00.000Z",
      "date_modified": "2024-03-20T09:26:16.000Z",
      "authors": [
        {
          "name": "梁贺祥"
        }
      ],
      "tags": [
        "技术",
        "IT"
      ]
    },
    {
      "title": "大脑——一切问题的起源",
      "url": "https://lianghexiang.github.io/space/anything/book_notes/%E4%BA%BA%E4%B9%8B%E8%A7%89%E9%86%92/%E4%B8%80%E5%88%87%E9%97%AE%E9%A2%98%E7%9A%84%E8%B5%B7%E6%BA%90.html",
      "id": "https://lianghexiang.github.io/space/anything/book_notes/%E4%BA%BA%E4%B9%8B%E8%A7%89%E9%86%92/%E4%B8%80%E5%88%87%E9%97%AE%E9%A2%98%E7%9A%84%E8%B5%B7%E6%BA%90.html",
      "content_html": "<h1 id=\"大脑——一切问题的起源\" tabindex=\"-1\"> 大脑——一切问题的起源</h1>\n<p>人是特殊的，因为有可以进行自我审视的大脑，有自我意识。但是我们大多数人都不了解自己的大脑，所以才会对自身产生的问题感到困惑。现在，我们从了解大脑开始，重新认识“自己”</p>\n\n<nav><ul><li><router-link to=\"#第一节-大脑-重新认识你自己\"><i>Content not supported</i> 第一节　大脑：重新认识你自己</router-link><ul><li><router-link to=\"#_1-三重大脑\">1.三重大脑</router-link></li></ul></li></ul></nav>\n<h2 id=\"第一节-大脑-重新认识你自己\" tabindex=\"-1\"> <i>Content not supported</i> 第一节　大脑：重新认识你自己</h2>\n<h3 id=\"_1-三重大脑\" tabindex=\"-1\"> 1.三重大脑</h3>\n<div>\n<p>大脑的进化</p>\n<p>人类聪明的大脑并不是突然出现，而是经过漫长的演化。从远古海洋的“复制子”，进化成为单细胞，接着又演化为动物、植物和微生物等，最终这些生物爬上陆地，开始了爬行动物的时代。后来，开始出现哺乳动物，为了适应环境， 进化出了&quot;情绪脑&quot;，而人类因为进化出了无与伦比的大脑&quot;新皮层&quot;，所以在哺乳类动物中脱颖而出，成为&quot;万物之灵&quot;，这一块新的区域被称为&quot;理智脑&quot;。</p>\n</div>\n<p><img src=\"https://raw.githubusercontent.com/lianghexiang/picgo-picture/main/vuepress/2024-02-05-POggHv.png\" alt=\"\" loading=\"lazy\"><br>\n<img src=\"https://raw.githubusercontent.com/lianghexiang/picgo-picture/main/vuepress/2024-02-05-De6pnz.png\" alt=\"33\" loading=\"lazy\"></p>\n<h4 id=\"本能脑\" tabindex=\"-1\"> 1️⃣本能脑</h4>\n<p>爬行动物时代进化出的脑结构。本能脑的结构很简单，只有一个原始的反射模块，可以让爬行动物对环境快速做出本能反应。<br>\n爬行动物的特点：</p>\n<ul>\n<li>没有情感也没有理智</li>\n<li>大脑结构简单</li>\n<li>体温无法恒定<br>\n因为<strong>本能脑</strong>是最原始的脑结构，所以本能脑也被称为原始脑、基础脑、鳄鱼脑、蜥蜴脑，或者干脆叫爬行脑。</li>\n</ul>\n<h4 id=\"情绪脑\" tabindex=\"-1\"> 2️⃣情绪脑</h4>\n<div>\n<p>情绪脑</p>\n<p>2亿年前的哺乳动物时代进化出的脑结构.<br>\n哺乳动物为了适应环境，不仅能让身体温度保持恒定，还进化出了<strong>情绪脑</strong>，</p>\n</div>\n<h4 id=\"理智脑\" tabindex=\"-1\"> 3️⃣理智脑</h4>\n",
      "image": "https://img.tucang.cc/api/image/show/162dc86c7925e40d3e32b8b1cc036876",
      "date_published": "2024-01-31T00:00:00.000Z",
      "date_modified": "2024-02-07T06:20:03.000Z",
      "authors": [
        {
          "name": "梁贺祥"
        }
      ],
      "tags": [
        "读书笔记"
      ]
    },
    {
      "title": "PicgoGitHub图床",
      "url": "https://lianghexiang.github.io/space/posts/tools/PicgoGitHub%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A.html",
      "id": "https://lianghexiang.github.io/space/posts/tools/PicgoGitHub%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A.html",
      "content_html": "<h1 id=\"picgogithub图床\" tabindex=\"-1\"> PicgoGitHub图床</h1>\n<h2 id=\"前言\" tabindex=\"-1\"> 前言</h2>\n<p>这篇文章主要介绍在💻<code>windows</code>系统下安装PicGo并且在🇬🇭  GitHub上创建仓库来做我们自己的个人图床。</p>\n<p>首先，什么是 <code>Picgo</code>？</p>\n<p>picgo网站地址：<a href=\"https://picgo.github.io/PicGo-Doc/zh/guide/#%E7%89%B9%E8%89%B2%E5%8A%9F%E8%83%BD\" target=\"_blank\" rel=\"noopener noreferrer\">https://picgo.github.io/PicGo-Doc/zh/guide/#特色功能</a></p>\n<p><strong>PicGo: 一个用于快速上传图片并获取图片 URL 链接的工具</strong></p>\n<p>呈上GitHub下载地址：<a href=\"https://github.com/Molunerfinn/PicGo/releases\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/Molunerfinn/PicGo/releases</a></p>\n<p>也可以在picgo网站中找到各种下载原，比如GitHub的，腾讯的，以及别的源，哪个快用哪个。</p>\n<p><strong>应用截图</strong></p>\n<figure><img src=\"https://raw.githubusercontent.com/Molunerfinn/test/master/picgo/picgo-2.0.gif\" alt=\"img\" tabindex=\"0\" loading=\"lazy\"><figcaption>img</figcaption></figure>\n<p>GitHub想必就不用做过多介绍了，一句话概括就是一个在线的代码托管平台。</p>\n<p>Picgo支持很多的图床，比如七牛云，腾讯云等，这里我们介绍的是免费的GitHub。</p>\n<h2 id=\"动手\" tabindex=\"-1\"> 动手</h2>\n<h3 id=\"_1-安装picgo\" tabindex=\"-1\"> 1. 安装Picgo</h3>\n<p>我选择的是2.4.0.beta版本，大家安装的时候可以选择稳定版，看个人喜好，喜欢尝试新功能的可以按照beta版，偏向于稳定的就安装稳定版。</p>\n<p>2.3.1稳定版：<a href=\"https://github.com/Molunerfinn/PicGo/releases/tag/v2.3.1\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/Molunerfinn/PicGo/releases/tag/v2.3.1</a></p>\n<figure><img src=\"https://raw.githubusercontent.com/lianghexiang/picgo-picture/main/vuepressimage-20230729151038685.png\" alt=\"image-20230729151038685\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20230729151038685</figcaption></figure>\n<p>其余的安装过程不再赘述，因为没什么特别需要注意的地方，傻瓜式安装就可以了，不想安装在C盘的注意更改安装目录。</p>\n<h3 id=\"_2-github仓库\" tabindex=\"-1\"> 2. GitHub仓库</h3>\n<ol>\n<li>先登录GitHub，点击  + ，点击创建仓库</li>\n</ol>\n<figure><img src=\"https://raw.githubusercontent.com/lianghexiang/picgo-picture/main/vuepressimage-20230729164849247.png\" alt=\"image-20230729164849247\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20230729164849247</figcaption></figure>\n<ol start=\"2\">\n<li>\n<p>创建仓库前配置好<code>名称</code>，<code>权限</code>，模板等，因为我们要在网络上访问，所以要选择<code>Public</code>.</p>\n<figure><img src=\"https://raw.githubusercontent.com/lianghexiang/picgo-picture/main/vuepressimage-20230729164838764.png\" alt=\"image-20230729164838764\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20230729164838764</figcaption></figure>\n</li>\n</ol>\n<p>​\t创建成功后会跳转到仓库页面</p>\n<figure><img src=\"https://raw.githubusercontent.com/lianghexiang/picgo-picture/main/vuepressimage-20230729164829442.png\" alt=\"image-20230729164829442\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20230729164829442</figcaption></figure>\n<ol start=\"3\">\n<li>\n<p>生成token</p>\n<p>token是用来验证用户身份的表示，所以要自己揣兜里，不要让别人看到。</p>\n<p>点击右上角的头像</p>\n<figure><img src=\"https://raw.githubusercontent.com/lianghexiang/picgo-picture/main/vuepressimage-20230729164813237.png\" alt=\"image-20230729164813237\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20230729164813237</figcaption></figure>\n<p>然后点击Settings</p>\n<figure><img src=\"https://raw.githubusercontent.com/lianghexiang/picgo-picture/main/vuepressimage-20230729164803602.png\" alt=\"image-20230729164803602\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20230729164803602</figcaption></figure>\n<p>在左侧导航栏的最下方找到<code>Developer settings</code>,然后点击，-&gt;</p>\n</li>\n</ol>\n<figure><img src=\"https://raw.githubusercontent.com/lianghexiang/picgo-picture/main/vuepressimage-20230729164654737.png\" alt=\"image-20230729164654737\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20230729164654737</figcaption></figure>\n<p>跳转到如下页面-&gt;</p>\n<figure><img src=\"https://raw.githubusercontent.com/lianghexiang/picgo-picture/main/vuepressimage-20230729152822569.png\" alt=\"image-20230729152822569\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20230729152822569</figcaption></figure>\n<p>然后，设置过期时间，权限等 -&gt;</p>\n<figure><img src=\"https://raw.githubusercontent.com/lianghexiang/picgo-picture/main/vuepressimage-20230729164637962.png\" alt=\"image-20230729164637962\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20230729164637962</figcaption></figure>\n<p>最后，划到页面最底部，点击生成token：*************</p>\n<figure><img src=\"https://raw.githubusercontent.com/lianghexiang/picgo-picture/main/vuepressimage-20230729153248698.png\" alt=\"image-20230729153248698\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20230729153248698</figcaption></figure>\n<p><strong>注意:这个token只能查看一次，如果离开这个页面在返回就看不到了, 所以先保存好token</strong></p>\n<h3 id=\"_3-配置picgo\" tabindex=\"-1\"> 3.  🛠️配置PicGo</h3>\n<p>打开PicGo</p>\n<p>点击图床设置，我们可以看到GitHub</p>\n<figure><img src=\"https://raw.githubusercontent.com/lianghexiang/picgo-picture/main/vuepressimage-20230729155924896.png\" alt=\"image-20230729155924896\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20230729155924896</figcaption></figure>\n<p>1️⃣：图床配置名</p>\n<blockquote>\n<p>可以自己随便命名</p>\n</blockquote>\n<p>2️⃣: 设置仓库名</p>\n<blockquote>\n<p>用户名/仓库名</p>\n</blockquote>\n<p>3️⃣:设置分支名</p>\n<blockquote>\n<p>一般都为main</p>\n</blockquote>\n<p>4️⃣: 设置token</p>\n<blockquote>\n<p>这里就要用到我们之前创建仓库之后设置的token了，将它填进去即可</p>\n</blockquote>\n<p>5️⃣: 设置存储路径</p>\n<blockquote>\n<p>默认的话会上传的仓库的根目录，也就是/，如果我们想要上传到仓库的某个目录下，就需要填写目录名称，并且以/结尾</p>\n<p>比如我想上传到仓库下的blog目录下，这里就填写<code>blog/</code></p>\n</blockquote>\n<p>6️⃣: 设置自定义域名</p>\n<blockquote>\n<p>我这里没有用到自定义域名，如果读者有需要的话可以问问度娘</p>\n</blockquote>\n<p>配置完之后，在上传区选中GitHub</p>\n<figure><img src=\"https://raw.githubusercontent.com/lianghexiang/picgo-picture/main/vuepressimage-20230729162854239.png\" alt=\"image-20230729162854239\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20230729162854239</figcaption></figure>\n<p>到此Picgo和GitHub的图床已经配置完成了，接下来就可以快乐的将图片上传到GitHub，然后获取到链接，在远程来访问我们的图片啦。</p>\n<h3 id=\"_4-typora\" tabindex=\"-1\"> 4. Typora</h3>\n<p>另外，经常使用Typora的小伙伴也可以通过Typora的偏好设置来将我们本地的图片通过PicGo来自动上传到仓库中啦</p>\n<ol>\n<li>点开Typora导航栏中的文件</li>\n</ol>\n<figure><img src=\"https://raw.githubusercontent.com/lianghexiang/picgo-picture/main/vuepressimage-20230729163642417.png\" alt=\"image-20230729163642417\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20230729163642417</figcaption></figure>\n<ol start=\"2\">\n<li>\n<p>在偏好设置中配置PicGo</p>\n<figure><img src=\"https://raw.githubusercontent.com/lianghexiang/picgo-picture/main/vuepressimage-20230729164404631.png\" alt=\"image-20230729164404631\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20230729164404631</figcaption></figure>\n</li>\n</ol>\n",
      "image": "https://img.tucang.cc/api/image/show/3f96a1fd6956f27e1badccf6d7f982e1",
      "date_published": "2023-07-14T00:00:00.000Z",
      "date_modified": "2024-01-28T09:53:16.000Z",
      "authors": [],
      "tags": [
        "工具"
      ]
    },
    {
      "title": "Sublime Text使用文档说明书",
      "url": "https://lianghexiang.github.io/space/posts/tools/sublime%E8%AF%B4%E6%98%8E%E4%B9%A6.html",
      "id": "https://lianghexiang.github.io/space/posts/tools/sublime%E8%AF%B4%E6%98%8E%E4%B9%A6.html",
      "content_html": "<h1 id=\"sublime-text使用文档说明书\" tabindex=\"-1\"> Sublime Text使用文档说明书</h1>\n<h3 id=\"sublimetext预览markdown\" tabindex=\"-1\"> SublimeText预览Markdown</h3>\n<h4 id=\"_1-markdowneditor\" tabindex=\"-1\"> 1. MarkdownEditor</h4>\n<p>🏷️MarkdownEditing是一个功能丰富的插件，提供了对Markdown文件的语法高亮、自动补全、预览等功能。</p>\n<p>安装：</p>\n<p>Ctrl+Shift+P打开控制台，输入Package Control: Install Package，然后输入MarkdownEditor，选择安装</p>\n",
      "image": "https://img.tucang.cc/api/image/show/72e720a5032441381e8d626f0e6538f1",
      "date_published": "2023-07-14T00:00:00.000Z",
      "date_modified": "2024-01-28T08:55:44.000Z",
      "authors": [],
      "tags": [
        "工具"
      ]
    },
    {
      "title": "Vue基础知识",
      "url": "https://lianghexiang.github.io/space/posts/Vue/Vue%E5%9F%BA%E7%A1%80.html",
      "id": "https://lianghexiang.github.io/space/posts/Vue/Vue%E5%9F%BA%E7%A1%80.html",
      "content_html": "<h1 id=\"vue基础知识\" tabindex=\"-1\"> Vue基础知识</h1>\n<h3 id=\"指令系统\" tabindex=\"-1\"> 指令系统</h3>\n<ol>\n<li>v-text</li>\n<li>v-html</li>\n<li>v-show</li>\n<li>v-if</li>\n<li>v-model 双向数据绑定</li>\n</ol>\n<h3 id=\"常用属性\" tabindex=\"-1\"> 常用属性</h3>\n<ol>\n<li>data()</li>\n<li>el</li>\n<li>methods</li>\n<li>watch</li>\n<li>computed</li>\n<li>templates</li>\n</ol>\n<h3 id=\"vue组件\" tabindex=\"-1\"> Vue组件</h3>\n<h4 id=\"全局组件\" tabindex=\"-1\"> 全局组件</h4>\n<p><strong>用法</strong>：</p>\n<div data-ext=\"text\"><pre><code>Vue.component(\"组件的名字\", {属性：})\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><h4 id=\"局部组件\" tabindex=\"-1\"> 局部组件</h4>\n<ol>\n<li>声明子组件</li>\n<li>挂载子组件</li>\n<li>使用子组件</li>\n</ol>\n<h3 id=\"组件传值\" tabindex=\"-1\"> 组件传值</h3>\n<h4 id=\"_1-父组件-子组件\" tabindex=\"-1\"> 1. 父组件 --&gt;  子组件</h4>\n<h4 id=\"_2-子组件-父组件\" tabindex=\"-1\"> 2. 子组件  --&gt; 父组件</h4>\n<h4 id=\"_3-平行组件传值\" tabindex=\"-1\"> 3. 平行组件传值</h4>\n<h3 id=\"生命周期钩子函数\" tabindex=\"-1\"> 生命周期钩子函数</h3>\n<ul>\n<li>beforeCreate</li>\n<li>created  重点\n<ul>\n<li>组件创建</li>\n<li>虚拟DOM</li>\n<li>发送ajax，获取数据，实现数据驱动视图</li>\n</ul>\n</li>\n<li>beforeMount</li>\n<li>mounted  重点\n<ul>\n<li>获取真实DOM</li>\n</ul>\n</li>\n<li>beforeUpdate</li>\n<li>updated</li>\n<li>activated</li>\n<li>deactivated</li>\n<li></li>\n</ul>\n<h3 id=\"组件的缓存\" tabindex=\"-1\"> 组件的缓存</h3>\n<h4 id=\"内置组件标签\" tabindex=\"-1\"> 内置组件标签</h4>\n<p>缓存组件</p>\n<div data-ext=\"html\"><pre><code><span>&lt;!--当组件在被切换后需要保存样式时--></span>\n<span><span><span>&lt;</span>keep-alive</span><span>></span></span> 需要被缓存的组件 <span><span><span>&lt;/</span>keep-alive</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div></div></div><h3 id=\"vue的全家桶-vue-vue-router-vuex\" tabindex=\"-1\"> Vue的全家桶（Vue+Vue-router+Vuex）</h3>\n<h4 id=\"spa-single-page-application\" tabindex=\"-1\"> SPA（Single Page Application）</h4>\n<h3 id=\"vue-router\" tabindex=\"-1\"> Vue-router</h3>\n<p>安装：</p>\n<ol>\n<li>CDN引入：\n<ol>\n<li>vue-2.0： <a href=\"https://unpkg.com/vue-router@2.0.0/dist/vue-router.js\" target=\"_blank\" rel=\"noopener noreferrer\">https://unpkg.com/vue-router@2.0.0/dist/vue-router.js</a></li>\n<li>vue-3.0： <a href=\"https://unpkg.com/vue-router@4.0.15/dist/vue-router.global.js%E3%80%82\" target=\"_blank\" rel=\"noopener noreferrer\">https://unpkg.com/vue-router@4.0.15/dist/vue-router.global.js。</a></li>\n</ol>\n</li>\n<li>文件引入</li>\n</ol>\n<blockquote>\n<p>VUe的核心插件<br>\n文档参考：<a href=\"https://router.vuejs.org/zh/\" target=\"_blank\" rel=\"noopener noreferrer\">https://router.vuejs.org/zh/</a></p>\n</blockquote>\n<div data-ext=\"html\"><pre><code> Vue Router 是 Vue.js 的官方路由。它与 Vue.js 核心深度集成，让用 Vue.js 构建单页应用变得轻而易举。功能包括：  \n● 嵌套路由映射\n● 动态路由选择\n● 模块化、基于组件的路由配置\n● 路由参数、查询、通配符\n● 展示由 Vue.js 的过渡系统提供的过渡效果\n● 细致的导航控制\n● 自动激活 CSS 类的链接\n● HTML5 history 模式或 hash 模式\n● 可定制的滚动行为\n● URL 的正确编码\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"_1-定义组件\" tabindex=\"-1\"> 1. 定义组件</h4>\n<p>在页面中定义路由组件，在路由规则中进行映射</p>\n<h4 id=\"_2-定义路由\" tabindex=\"-1\"> 2. 定义路由</h4>\n<div data-ext=\"js\"><pre><code>\n<span>routes</span><span>:</span><span>[</span>\n  <span>{</span>\n    <span>path</span><span>:</span> <span>\"/home\"</span><span>,</span>\n    <span>component</span><span>:</span> Home\n  <span>}</span><span>,</span>\n  <span>{</span>\n    <span>path</span><span>:</span> <span>'/course'</span><span>,</span>\n    <span>component</span><span>:</span> Course\n  <span>}</span>\n<span>]</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"_3-创建路由实例\" tabindex=\"-1\"> 3. 创建路由实例</h4>\n<div data-ext=\"js\"><pre><code><span>const</span> router <span>=</span> <span>new</span> <span>VueRouter</span><span>(</span><span>{</span>\n<span>}</span><span>)</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div></div></div><h4 id=\"_4-挂载路由实例到根实例\" tabindex=\"-1\"> 4. 挂载路由实例到根实例</h4>\n<div data-ext=\"js\"><pre><code><span>new</span> <span>Vue</span><span>(</span><span>{</span>\n        <span>el</span><span>:</span> <span>\"#app\"</span><span>,</span>\n        <span>// 挂载路由</span>\n        <span>router</span><span>:</span> router<span>,</span>\n        <span>data</span><span>:</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>\n            <span>return</span> <span>{</span>\n\n            <span>}</span><span>;</span>\n        <span>}</span><span>,</span>\n        <span>template</span><span>:</span> <span><span>`</span><span>&lt;App>&lt;/App></span><span>`</span></span><span>,</span>\n        <span>components</span><span>:</span> <span>{</span>\n            App\n        <span>}</span>\n    <span>}</span><span>)</span>\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><ol>\n<li>全局组件：router-link\n<ol>\n<li>使用 router-link 组件来导航.</li>\n<li>通过传入 <code>to</code> 属性指定链接.</li>\n<li>router-link 默认会被渲染成一个 <code>&lt;a&gt;</code> 标签</li>\n</ol>\n</li>\n</ol>\n<div data-ext=\"html\"><pre><code># 触发原生的click事件\n<span><span><span>&lt;</span>router-link</span> <span>:to</span><span><span>=</span><span>'</span>/<span>'</span></span> <span>@click.native</span><span><span>=</span><span>'</span>function<span>'</span></span><span>></span></span>  \n</code></pre><div aria-hidden=\"true\"><div></div><div></div></div></div><ol start=\"2\">\n<li>全局组件：router-view</li>\n</ol>\n<div data-ext=\"html\"><pre><code><span><span><span>&lt;</span>div</span> <span>id</span><span><span>=</span><span>\"</span>app<span>\"</span></span><span>></span></span>\n<span><span><span>&lt;/</span>div</span><span>></span></span>\n<span><span><span>&lt;</span>script</span> <span>src</span><span><span>=</span><span>\"</span>../js/vue.js<span>\"</span></span><span>></span></span><span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n<span><span><span>&lt;</span>script</span> <span>src</span><span><span>=</span><span>\"</span>vue-router.js<span>\"</span></span><span>></span></span><span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n    <span>const</span> Home <span>=</span> <span>{</span>\n        <span>data</span><span>:</span> <span>function</span><span>(</span><span>)</span><span>{</span>\n            <span>return</span> <span>{</span>\n\n            <span>}</span><span>;</span>\n        <span>}</span><span>,</span>\n        <span>template</span><span>:</span> <span><span>`</span><span>&lt;div>这是首页&lt;/div></span><span>`</span></span><span>,</span>\n    <span>}</span><span>;</span>\n    <span>const</span> Course <span>=</span> <span>{</span>\n        <span>data</span><span>:</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>\n            <span>return</span> <span>{</span>\n\n            <span>}</span><span>;</span>\n        <span>}</span><span>,</span>\n        <span>template</span><span>:</span> <span><span>`</span><span>&lt;div>课程列表&lt;/div></span><span>`</span></span><span>,</span>\n    <span>}</span><span>;</span>\n    <span>//创建路由规则</span>\n    <span>const</span> routes <span>=</span> <span>[</span>\n        <span>{</span>\n            <span>path</span><span>:</span> <span>\"/home\"</span><span>,</span>\n            <span>component</span><span>:</span> Home\n        <span>}</span><span>,</span>\n        <span>{</span>\n            <span>path</span><span>:</span> <span>'/course'</span><span>,</span>\n            <span>component</span><span>:</span> Course\n        <span>}</span>\n    <span>]</span><span>;</span>\n    <span>// 定义路由</span>\n    <span>const</span> router <span>=</span> <span>new</span> <span>VueRouter</span><span>(</span><span>{</span>\n        <span>// 缩写</span>\n        <span>// routes</span>\n        <span>routes</span><span>:</span> routes<span>,</span>\n    <span>}</span><span>)</span>\n\n\n\n    <span>let</span> App <span>=</span> <span>{</span>\n        <span>data</span><span>:</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>\n            <span>return</span> <span>{</span><span>}</span><span>;</span>\n        <span>}</span><span>,</span>\n        <span>// router-view 路由组件出口</span>\n        <span>template</span><span>:</span> <span><span>`</span><span>\n            &lt;div>\n                &lt;div>\n                    &lt;router-link to=\"/home\">首页&lt;/router-link>\n                    &lt;router-link to=\"/course\">课程&lt;/router-link>\n                &lt;/div>\n                &lt;router-view>&lt;/router-view>\n\n            &lt;/div></span><span>`</span></span><span>,</span>\n    <span>}</span><span>;</span>\n    <span>new</span> <span>Vue</span><span>(</span><span>{</span>\n        <span>el</span><span>:</span> <span>\"#app\"</span><span>,</span>\n        <span>// 挂载路由</span>\n        <span>router</span><span>:</span> router<span>,</span>\n        <span>data</span><span>:</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>\n            <span>return</span> <span>{</span>\n\n            <span>}</span><span>;</span>\n        <span>}</span><span>,</span>\n        <span>template</span><span>:</span> <span><span>`</span><span>&lt;App>&lt;/App></span><span>`</span></span><span>,</span>\n        <span>components</span><span>:</span> <span>{</span>\n            App\n        <span>}</span>\n    <span>}</span><span>)</span>\n\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"_5-命名路由\" tabindex=\"-1\"> 5. 命名路由</h4>\n<ol>\n<li>在路由规则中添加<code>name</code>属性</li>\n</ol>\n<div data-ext=\"html\"><pre><code>path: \"/home\",\n// 命名路由\nname: \"Home\",\ncomponent: Home\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><ol start=\"2\">\n<li>在router-link中绑定</li>\n</ol>\n<div data-ext=\"html\"><pre><code><span><span><span>&lt;</span>router-link</span> <span>:to</span><span><span>=</span><span>\"</span>{'name': 'Home'}<span>\"</span></span><span>></span></span>首页<span><span><span>&lt;/</span>router-link</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><h4 id=\"_6-动态路由\" tabindex=\"-1\"> 6.动态路由</h4>\n<ol>\n<li>路由规则</li>\n</ol>\n<div data-ext=\"js\"><pre><code> <span>routes</span><span>:</span> <span>[</span>\n    <span>// 动态路径参数 以冒号开头</span>\n   <span>// 在路由中设置的参数都会被添加到$route.params中，$route.params.id</span>\n    <span>{</span> <span>path</span><span>:</span> <span>'/user/:id'</span><span>,</span> <span>component</span><span>:</span> User <span>}</span>\n  <span>]</span>\n<span>// 可以在路由中设置多个参数，都会被</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><table username:=\"\" tom,=\"\" post_id:=\"\" 123=\"\">\n<thead>\n<tr>\n<th>模式</th>\n<th>匹配路径</th>\n<th>$route.params</th>\n</tr>\n</thead>\n<tbody>\n<tr username:=\"\" tom=\"\">\n<td>/user/:username</td>\n<td>/user/tom</td>\n<td></td>\n</tr>\n<tr>\n<td>/user/:username/post/:post_id</td>\n<td>/user/tom/post/123</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<ol start=\"2\">\n<li>响应路由参数的变化</li>\n</ol>\n<blockquote>\n<p>当使用路由参数时，<code>符合相同路由规则的导航</code>，例如从 /user/foo 导航到 /user/bar，<strong>原来的组件实例会被复用</strong>。因为两个路由都渲染同个组件，比起销毁再创建，复用则显得更加高效。<strong>不过，这也意味着组件的生命周期钩子不会再被调用</strong>。</p>\n</blockquote>\n<p>使用watch属性，监测路由的变化</p>\n<div data-ext=\"js\"><pre><code><span>// 动态路由试例</span>\n    <span>const</span> User <span>=</span> <span>{</span>\n        <span>data</span><span>(</span><span>)</span><span>{</span>\n            <span>return</span> <span>{</span><span>}</span><span>;</span>\n        <span>}</span><span>,</span>\n        <span>template</span><span>:</span> <span><span>`</span><span>&lt;div>&lt;p>用户ID：{{$route.params.id}}&lt;/p>&lt;/div></span><span>`</span></span><span>,</span>\n        <span>// 由于组件被复用，钩子函数只会调用一次</span>\n        <span>created</span><span>(</span><span>)</span><span>{</span>\n            console<span>.</span><span>log</span><span>(</span><span>\"组件被创建\"</span><span>)</span>\n        <span>}</span><span>,</span>\n        <span>// 使用watch监听路由变化或者beforeRouteUpdate 导航守卫</span>\n        <span>watch</span><span>:</span> <span>{</span>\n            <span>$route</span><span>(</span><span>to<span>,</span> <span>from</span></span><span>)</span> <span>{</span>\n                console<span>.</span><span>log</span><span>(</span>to<span>)</span>\n                console<span>.</span><span>log</span><span>(</span>from<span>)</span>\n                <span>// 跳转到首页</span>\n                <span>// 编程式跳转</span>\n                <span>// this.$router.push({path:'/home'})  // 可以加入对象</span>\n                <span>this</span><span>.</span>$router<span>.</span><span>push</span><span>(</span><span>{</span><span>name</span><span>:</span><span>'Home'</span><span>}</span><span>)</span>  <span>// 可以加入对象</span>\n            <span>}</span>\n        <span>}</span>\n    <span>}</span>\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>",
      "image": "https://img.tucang.cc/api/image/show/6c8acb93bd0fc9dd85006746d572df8f",
      "date_published": "2024-01-03T00:00:00.000Z",
      "date_modified": "2024-01-25T08:12:29.000Z",
      "authors": [],
      "tags": [
        "Vue"
      ]
    },
    {
      "title": "Vue客户端",
      "url": "https://lianghexiang.github.io/space/posts/Vue/vue%E5%AE%A2%E6%88%B7%E7%AB%AF.html",
      "id": "https://lianghexiang.github.io/space/posts/Vue/vue%E5%AE%A2%E6%88%B7%E7%AB%AF.html",
      "content_html": "<h1 id=\"vue客户端\" tabindex=\"-1\"> Vue客户端</h1>\n<h3 id=\"_1-什么是webpack\" tabindex=\"-1\"> 1. 什么是webpack</h3>\n<blockquote>\n<p>本质上，<em>webpack</em> 是一个现代 JavaScript 应用程序的_静态模块打包器(module bundler)<em>。当 webpack 处理应用程序时，它会递归地构建一个_依赖关系图(dependency graph)</em>，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 <em>bundle</em>。</p>\n</blockquote>\n<figure><img src=\"https://cdn.nlark.com/yuque/0/2022/png/21881466/1657857178273-f17c0225-7be9-470a-b14a-3fdaebbcc194.png#clientId=u946fd131-c234-4&amp;from=paste&amp;height=319&amp;id=u62fb1adf&amp;originHeight=588&amp;originWidth=1125&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=60942&amp;status=done&amp;style=none&amp;taskId=ua4fd9b52-4a29-4fc7-8637-ff6a4daecd2&amp;title=&amp;width=610.1666870117188\" alt=\"图片.png\" tabindex=\"0\" loading=\"lazy\"><figcaption>图片.png</figcaption></figure>\n<h3 id=\"_2-安装webpack\" tabindex=\"-1\"> 2. 安装webpack</h3>\n<div data-ext=\"sh\"><pre><code>PS C:<span>\\</span>Users<span>\\</span>Administrator<span>></span> <span>npm</span> i webpack@3.12.0 <span>-g</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><h3 id=\"diy脚手架\" tabindex=\"-1\"> DIY脚手架</h3>\n<h4 id=\"_1-cmd规范\" tabindex=\"-1\"> 1. cmd规范</h4>\n<ol>\n<li>抛出：module.exports = xxx</li>\n<li>引用：require(相对路径)</li>\n</ol>\n<h4 id=\"_2-es6-module\" tabindex=\"-1\"> 2. ES6  module</h4>\n<div data-ext=\"js\"><pre><code><span>var</span> person<span>;</span>\nperson <span>=</span> <span>{</span>\n    <span>name</span><span>:</span> <span>\"Tom\"</span><span>,</span>\n    <span>age</span><span>:</span> <span>20</span><span>,</span>\n    <span>action</span><span>:</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>\n        console<span>.</span><span>log</span><span>(</span><span>\"吃饭\"</span><span>)</span>\n    <span>}</span>\n<span>}</span><span>;</span>\n<span>var</span> text <span>=</span> <span>\"测试webpack\"</span><span>;</span>\n\n<span>// 抛出变量</span>\n<span>export</span> <span>{</span>text<span>}</span><span>;</span>\n<span>// 抛出对象</span>\n<span>export</span> <span>default</span> person<span>;</span>\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><figure><img src=\"https://cdn.nlark.com/yuque/0/2022/png/21881466/1657861083761-d7c826f4-dd52-46ef-a417-ad22bbfbe9e8.png#clientId=u946fd131-c234-4&amp;from=paste&amp;height=513&amp;id=u5882659e&amp;originHeight=560&amp;originWidth=729&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=65714&amp;status=done&amp;style=none&amp;taskId=u11e2c40e-49fc-42e7-9d89-ce8d762efdd&amp;title=&amp;width=668.25\" alt=\"图片.png\" tabindex=\"0\" loading=\"lazy\"><figcaption>图片.png</figcaption></figure>\n<div data-ext=\"js\"><pre><code><span>// 引入</span>\n<span>// as x 起变量名，避免冲突</span>\n<span>import</span> <span>*</span> <span>as</span> c <span>from</span> <span>'./module'</span>\n\nconsole<span>.</span><span>log</span><span>(</span>c<span>.</span>text<span>)</span>\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><div data-ext=\"html\"><pre><code><span><span><span>&lt;</span>body</span><span>></span></span>\n  <span><span><span>&lt;</span>div</span> <span>id</span><span><span>=</span><span>\"</span>app<span>\"</span></span><span>></span></span><span><span><span>&lt;/</span>div</span><span>></span></span>\n  <span><span><span>&lt;</span>script</span> <span>src</span><span><span>=</span><span>\"</span>./main.js<span>\"</span></span><span>></span></span><span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n<span><span><span>&lt;/</span>body</span><span>></span></span>\n<span><span><span>&lt;/</span>html</span><span>></span></span>\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/21881466/1657861203034-2540a3cd-9b91-4e2a-a042-bea3f9c48bec.png#clientId=u946fd131-c234-4&amp;from=paste&amp;height=73&amp;id=u1c14d7f7&amp;originHeight=80&amp;originWidth=600&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5254&amp;status=done&amp;style=none&amp;taskId=ud2b3a6cc-34d1-4b29-a4db-355a332deef&amp;title=&amp;width=550\" alt=\"图片.png\" loading=\"lazy\">Uncaught SyntaxError: Cannot use import statement outside a module<br>\n使用webpack支持模块化</p>\n<div data-ext=\"sh\"><pre><code>E:<span>\\</span>giteePython<span>\\</span>FrontEndStudy<span>\\</span>Vue<span>\\</span>Day-04<span>\\</span>webpack模块化支持<span>></span>webpack ./main.js ./bundle.js\nHash: 245a451e490b2734bb12\nVersion: webpack <span>3.12</span>.0\nTime: 35ms\nAsset     Size  Chunks             Chunk Names\nbundle.js  <span>3.29</span> kB       <span>0</span>  <span>[</span>emitted<span>]</span>  main\n<span>[</span><span>0</span><span>]</span> ./main.js <span>102</span> bytes <span>{</span><span>0</span><span>}</span> <span>[</span>built<span>]</span>\n<span>[</span><span>1</span><span>]</span> ./module.js <span>231</span> bytes <span>{</span><span>0</span><span>}</span> <span>[</span>built<span>]</span>\n\nE:<span>\\</span>giteePython<span>\\</span>FrontEndStudy<span>\\</span>Vue<span>\\</span>Day-04<span>\\</span>webpack模块化支持<span>></span>\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><div data-ext=\"html\"><pre><code><span><span><span>&lt;</span>body</span><span>></span></span>\n  <span><span><span>&lt;</span>div</span> <span>id</span><span><span>=</span><span>\"</span>app<span>\"</span></span><span>></span></span><span><span><span>&lt;/</span>div</span><span>></span></span>\n  <span>&lt;!--&lt;script src=\"./main.js\">&lt;/script>--></span>\n  <span><span><span>&lt;</span>script</span> <span>src</span><span><span>=</span><span>\"</span>./bundle.js<span>\"</span></span><span>></span></span><span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n<span><span><span>&lt;/</span>body</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><figure><img src=\"https://cdn.nlark.com/yuque/0/2022/png/21881466/1657861702777-25715e43-c31c-4eaf-979d-66df157632fc.png#clientId=u946fd131-c234-4&amp;from=paste&amp;height=195&amp;id=u23ac1549&amp;originHeight=213&amp;originWidth=948&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=19351&amp;status=done&amp;style=none&amp;taskId=u403cd069-6124-47c6-882f-47c49a184cf&amp;title=&amp;width=869.0000000000001\" alt=\"图片.png\" tabindex=\"0\" loading=\"lazy\"><figcaption>图片.png</figcaption></figure>\n<h3 id=\"vue-cli3脚手架的使用\" tabindex=\"-1\"> vue-cli3脚手架的使用</h3>\n<p>CLI (@vue/cli) 是一个全局安装的 npm 包，提供了终端里的 vue 命令。它可以通过 vue create 快速搭建一个新项<br>\n目，或者直接通过 vue serve 构建新想法的原型。你也可以通过 vue ui 通过一套图形化界面管理你的所有项目 。</p>\n<h4 id=\"安装\" tabindex=\"-1\"> 安装</h4>\n<blockquote>\n<p>关于旧版本<br>\nVue CLI 的包名称由 vue-cli 改成了 @vue/cli。 如果你已经全局安装了旧版本的 vue-cli (1.x 或 2.x)，你需要先通过 npm uninstall vue-cli -g 或 yarn global remove vue-cli 卸载它。</p>\n</blockquote>\n<div data-ext=\"sh\"><pre><code><span>npm</span> <span>install</span> <span>-g</span> @vue/cli\n<span># OR</span>\n<span>yarn</span> global <span>add</span> @vue/cli\n\n\nC:<span>\\</span>Users<span>\\</span>Administrator<span>></span>npm <span>install</span> <span>-g</span> @vue/cli\n<span>npm</span> WARN config global <span><span>`</span><span>--global</span><span>`</span></span>, <span><span>`</span><span>--local</span><span>`</span></span> are deprecated. Use <span><span>`</span><span>--location</span><span>=</span>global<span>`</span></span> instead.\n<span>npm</span> WARN config global <span><span>`</span><span>--global</span><span>`</span></span>, <span><span>`</span><span>--local</span><span>`</span></span> are deprecated. Use <span><span>`</span><span>--location</span><span>=</span>global<span>`</span></span> instead.\n<span>[</span><span>######............] \\ idealTree:tar-stream: timing idealTree:node_modules/@vue/cli/node_modules/tar-stream Completed i</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"拉取-2-x-模板-旧版本\" tabindex=\"-1\"> 拉取 2.x 模板 (旧版本)</h3>\n<blockquote>\n<p>Vue CLI &gt;= 3 和旧版使用了相同的 vue 命令，所以 Vue CLI 2 (vue-cli) 被覆盖了。如果你仍然需要使用旧版本的 vue init 功能，你可以全局安装一个桥接工具：</p>\n</blockquote>\n<div data-ext=\"sh\"><pre><code><span>npm</span> <span>install</span> <span>-g</span> @vue/cli-init\n<span># `vue init` 的运行效果将会跟 `vue-cli@2.x` 相同</span>\nvue init webpack my-project\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><h3 id=\"使用vue-cli-2-x-创建项目\" tabindex=\"-1\"> 使用vue-cli 2.x 创建项目</h3>\n<h4 id=\"使用webpack-simple创建项目\" tabindex=\"-1\"> 使用webpack-simple创建项目</h4>\n<ol>\n<li>命令 vue init webpack-simple my_project</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/21881466/1657869331955-239fb974-451e-4de8-a1ee-42dba3f75bbc.png#clientId=ud5ec8b75-3503-4&amp;from=paste&amp;height=273&amp;id=ub2c2bf4b&amp;originHeight=298&amp;originWidth=851&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=35001&amp;status=done&amp;style=none&amp;taskId=u4a9fa155-412f-4b57-a54e-83ae75fb6e0&amp;title=&amp;width=780.0833333333334\" alt=\"图片.png\" loading=\"lazy\">\t2. 文件结构：<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2022/png/21881466/1657877155012-41ce1a56-74e1-4678-9474-40f6bc9e0090.png#clientId=ud5ec8b75-3503-4&amp;from=paste&amp;height=215&amp;id=u94af56a3&amp;originHeight=234&amp;originWidth=340&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=11108&amp;status=done&amp;style=none&amp;taskId=u72b74c6b-deb1-499c-900c-f579d448499&amp;title=&amp;width=311.6666666666667\" alt=\"图片.png\" loading=\"lazy\"></p>\n<h4 id=\"使用webpack创建项目\" tabindex=\"-1\"> 使用webpack创建项目</h4>\n<ol>\n<li>命令： vue init webpack 项目名</li>\n<li>文件结构</li>\n<li><img src=\"https://cdn.nlark.com/yuque/0/2022/png/21881466/1657877049097-09fc14a3-19c5-4340-9995-41c162349ac3.png#clientId=ud5ec8b75-3503-4&amp;from=paste&amp;height=265&amp;id=u7419ccb5&amp;originHeight=289&amp;originWidth=370&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=12570&amp;status=done&amp;style=none&amp;taskId=u4b961330-dca6-4a24-9c7c-b9817fdf9ec&amp;title=&amp;width=339.1666666666667\" alt=\"图片.png\" tabindex=\"0\" loading=\"lazy\"><figcaption>图片.png</figcaption></li>\n</ol>\n<h3 id=\"启动\" tabindex=\"-1\"> 启动</h3>\n<div data-ext=\"sh\"><pre><code><span>npm</span> run dev\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/21881466/1657870143085-8bcae05a-269c-4618-ac4f-1c28323a59d1.png#clientId=ud5ec8b75-3503-4&amp;from=paste&amp;height=583&amp;id=ud188b8ce&amp;originHeight=636&amp;originWidth=1394&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=145703&amp;status=done&amp;style=none&amp;taskId=u34001fa6-9ea9-49e1-a0fe-041e6bbc693&amp;title=&amp;width=1277.8333333333335\" alt=\"图片.png\" loading=\"lazy\">###  安装vue-router</p>\n<div data-ext=\"sh\"><pre><code><span>npm</span> <span>install</span> vue-router <span>-S</span>  // 局部安装vue-router\n// 安装报错的话指定版本安装\n<span>npm</span> <span>install</span> vue-router@2.0.0 <span>-S</span> \n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><blockquote>\n<p>在引入文件时，index.js可以省略不写</p>\n</blockquote>\n<h3 id=\"webpack\" tabindex=\"-1\"> webpack</h3>\n<h4 id=\"_1-entry\" tabindex=\"-1\"> 1. entry</h4>\n<blockquote>\n<p>项目的入口文件, (main.js或者index.js)</p>\n</blockquote>\n<h4 id=\"_2-output\" tabindex=\"-1\"> 2. output</h4>\n<blockquote>\n<p>输出出口</p>\n</blockquote>\n<h4 id=\"_3-loading\" tabindex=\"-1\"> 3. loading</h4>\n<blockquote>\n<p>babel-loader: 对es6代码的解析<br>\ncss-loader：css代码解析<br>\nstyle-loader：将css代码添加一个style标签插入到header中</p>\n</blockquote>\n",
      "image": "https://img.tucang.cc/api/image/show/6c8acb93bd0fc9dd85006746d572df8f",
      "date_published": "2024-01-25T00:00:00.000Z",
      "date_modified": "2024-01-25T08:20:38.000Z",
      "authors": [],
      "tags": [
        "Vue"
      ]
    },
    {
      "title": "网站推荐",
      "url": "https://lianghexiang.github.io/space/anything/%E5%B0%8F%E8%AE%B0/%E5%A5%BD%E7%94%A8%E7%BD%91%E7%AB%99%E6%94%B6%E8%97%8F.html",
      "id": "https://lianghexiang.github.io/space/anything/%E5%B0%8F%E8%AE%B0/%E5%A5%BD%E7%94%A8%E7%BD%91%E7%AB%99%E6%94%B6%E8%97%8F.html",
      "content_html": "<h1 id=\"网站推荐\" tabindex=\"-1\"> 网站推荐</h1>\n<h3 id=\"_1-http-sparkbyexamples-com\" tabindex=\"-1\"> <i>Content not supported</i> 1. <a href=\"http://sparkbyexamples.com/\" target=\"_blank\" rel=\"noopener noreferrer\">http://sparkbyexamples.com/</a></h3>\n<div>\n<p>收藏理由</p>\n<p>是一个学习编程技术的网站，我主要是用来学习PySpark，因为这个网站的文档相比于官方文档来说，它的目录结构就比较一目了然，整体比较清晰；<br>\n而且，关于PySpark的每个模块，每个方法，它都用比较好理解的语言描述。然后，还会有示例代码来以更加直观的方式让读者明白相关模块如何使用</p>\n</div>\n<i>Content not supported</i>\n<h3 id=\"_2-https-www-exception-site\" tabindex=\"-1\"> <i>Content not supported</i> 2. <a href=\"https://www.exception.site\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.exception.site</a></h3>\n<div>\n<p>破解Pycharm</p>\n<p>常用IDE破解工具网站，包括了jetbrain全家桶系列，还有一些别的工具的破解方法，比如Xshell、Typora这些耳熟能详的工具,<br>\n而且教程详细易懂，附带破解工具下载，还包含了常见问题的解决办法，总之是一个不可多得的值得收藏的破解网站。非常好用❥</p>\n</div>\n<i>Content not supported</i>\n",
      "image": "https://img.tucang.cc/api/image/show/97c5d0c0a9f9c7aae374b30ce9f16e6d",
      "date_published": "2023-12-11T00:00:00.000Z",
      "date_modified": "2024-02-07T06:20:03.000Z",
      "authors": [],
      "tags": [
        "网址收藏"
      ]
    },
    {
      "title": "gPRC服务",
      "url": "https://lianghexiang.github.io/space/posts/gRPC/gRPC%E6%9C%8D%E5%8A%A1.html",
      "id": "https://lianghexiang.github.io/space/posts/gRPC/gRPC%E6%9C%8D%E5%8A%A1.html",
      "content_html": "<h1 id=\"gprc服务\" tabindex=\"-1\"> gPRC服务</h1>\n",
      "image": "https://img.tucang.cc/api/image/show/6c8acb93bd0fc9dd85006746d572df8f",
      "date_published": "2024-01-03T00:00:00.000Z",
      "date_modified": "2024-01-25T08:20:38.000Z",
      "authors": [],
      "tags": [
        "技术"
      ]
    },
    {
      "title": "2023初雪",
      "url": "https://lianghexiang.github.io/space/anything/%E5%B0%8F%E8%AE%B0/%E4%B8%8B%E9%9B%AA%E5%95%A6.html",
      "id": "https://lianghexiang.github.io/space/anything/%E5%B0%8F%E8%AE%B0/%E4%B8%8B%E9%9B%AA%E5%95%A6.html",
      "content_html": "<h1 id=\"_2023初雪\" tabindex=\"-1\"> 2023初雪</h1>\n<figure><img src=\"https://raw.githubusercontent.com/lianghexiang/picgo-picture/main/vuepress/微信图片_20231211101841.jpg\" alt=\"好白的雪\" tabindex=\"0\" loading=\"lazy\"><figcaption>好白的雪</figcaption></figure>\n<figure><img src=\"https://raw.githubusercontent.com/lianghexiang/picgo-picture/main/vuepress/微信图片_20231211102037.jpg\" alt=\"白雪皑皑\" tabindex=\"0\" loading=\"lazy\"><figcaption>白雪皑皑</figcaption></figure>\n",
      "image": "https://img.tucang.cc/api/image/show/da3546c26f3726a1f7a63e96921b30ff",
      "date_published": "2023-12-11T00:00:00.000Z",
      "date_modified": "2024-01-28T08:55:44.000Z",
      "authors": [],
      "tags": [
        "画册"
      ]
    },
    {
      "title": "DBUtils版本问题",
      "url": "https://lianghexiang.github.io/space/posts/python/Linux%E7%8E%AF%E5%A2%83%E4%B8%8BDBUtils%E5%AF%BC%E5%85%A5%E7%9A%84%E9%97%AE%E9%A2%98.html",
      "id": "https://lianghexiang.github.io/space/posts/python/Linux%E7%8E%AF%E5%A2%83%E4%B8%8BDBUtils%E5%AF%BC%E5%85%A5%E7%9A%84%E9%97%AE%E9%A2%98.html",
      "content_html": "<h1 id=\"dbutils版本问题\" tabindex=\"-1\"> DBUtils版本问题</h1>\n<h3 id=\"前言\" tabindex=\"-1\"> 前言</h3>\n<figure><img src=\"https://img2023.cnblogs.com/blog/2432585/202307/2432585-20230719090938564-1692406477.png\" alt=\"image\" tabindex=\"0\" loading=\"lazy\"><figcaption>image</figcaption></figure>\n<p>事情的起因是，原本在pycharm上开发的代码，因为要使用到线程池，所以就按安装了DBUtils，在windows上运行代码倒没什么问题，后因代码运行时需要占用的内存过多，所以代码要转移到Linux服务器上，问题由之而来，运行代码时总会会报出找不到DBUtils库的错误，经过几番反复确认，python环境已经安装了DBUtils，而且安装的其他三方库皆无问题，所以便是用了万能的百度，终于是解决了问题</p>\n<h3 id=\"如何解决\" tabindex=\"-1\"> 如何解决</h3>\n<p>更改导入模块的写法即可</p>\n<div data-ext=\"py\"><pre><code><span>from</span> dbutils<span>.</span>pooled_db <span>import</span> PooledDB\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>网上有教程说是版本 &lt;=1.3的DBUtils.PooledDB的方式导入是没问题的，但是我把版本降低到1.3还是出错，最终还是选择了&gt;=2.0的版本，使用<code>from dbutils.pooled_db import PooledDB</code>的方式导入，最终完美解决问题。</p>\n",
      "image": "https://img.tucang.cc/api/image/show/da3546c26f3726a1f7a63e96921b30ff",
      "date_published": "2023-07-28T00:00:00.000Z",
      "date_modified": "2024-01-25T08:20:38.000Z",
      "authors": [],
      "tags": [
        "技术"
      ]
    },
    {
      "title": "门面模式",
      "url": "https://lianghexiang.github.io/space/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F.html",
      "id": "https://lianghexiang.github.io/space/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F.html",
      "content_html": "<h1 id=\"门面模式\" tabindex=\"-1\"> 门面模式</h1>\n<p>本章涉及内容：</p>\n<ol>\n<li>\n<p>结构型设计模式概要；</p>\n</li>\n<li>\n<p>利用UML图理解门面设计模式；</p>\n</li>\n<li>\n<p>提供了Python v3.5实现代码的真实用例；</p>\n</li>\n<li>\n<p>门面模式与最少知识原则。</p>\n</li>\n</ol>\n<h3 id=\"_1-什么是结构性设计模式\" tabindex=\"-1\"> 1. 什么是结构性设计模式</h3>\n",
      "image": "https://img.tucang.cc/api/image/show/6c8acb93bd0fc9dd85006746d572df8f",
      "date_published": "2024-01-03T00:00:00.000Z",
      "date_modified": "2024-01-11T10:02:40.000Z",
      "authors": [],
      "tags": [
        "python"
      ]
    },
    {
      "title": "单例模式",
      "url": "https://lianghexiang.github.io/space/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html",
      "id": "https://lianghexiang.github.io/space/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html",
      "content_html": "<h1 id=\"单例模式\" tabindex=\"-1\"> 单例模式</h1>\n<div>\n<p>单例模式</p>\n<p>单例模式是一种创建型设计模式， 让你能够保证一个类只有一个实例， 并提供一个访问该实例的全局节点。</p>\n</div>\n<h2 id=\"单例模式结构\" tabindex=\"-1\"> 单例模式结构</h2>\n<figure><img src=\"https://raw.githubusercontent.com/lianghexiang/picgo-picture/main/vuepress/2024-04-26-bWP3E8.png\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<h2 id=\"单例模式的python实现\" tabindex=\"-1\"> 单例模式的Python实现</h2>\n<h3 id=\"_1-普通单例模式\" tabindex=\"-1\"> 1. 普通单例模式</h3>\n<blockquote>\n<p>_ <em>new</em> _方法可以在实例化类的时候通过hasattr方法返回同一个实例</p>\n</blockquote>\n<p>:sad:</p>\n<div data-ext=\"py\"><pre><code><span>class</span> <span>ExerciseSinglePattern</span><span>:</span>\n    <span>def</span> <span>__new__</span><span>(</span>cls<span>,</span> <span>*</span>args<span>,</span> <span>**</span>kwargs<span>)</span><span>:</span>\n        <span>if</span> <span>not</span> <span>hasattr</span><span>(</span>cls<span>,</span> <span>'_instance'</span><span>)</span><span>:</span>\n            cls<span>.</span>_instance <span>=</span> <span>super</span><span>(</span><span>)</span><span>.</span>__new__<span>(</span>cls<span>)</span>\n        <span>return</span> cls<span>.</span>_instance\n\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> a<span>,</span> b<span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>'__init__'</span><span>)</span>\n        self<span>.</span>a <span>=</span> a\n        self<span>.</span>b <span>=</span> b\n<span>if</span> __name__ <span>==</span> <span>'__main__'</span><span>:</span>\n    sp <span>=</span> ExerciseSinglePattern<span>(</span><span>'a'</span><span>,</span> <span>'b'</span><span>)</span>\n    sp2 <span>=</span> ExerciseSinglePattern<span>(</span><span>'c'</span><span>,</span> <span>'d'</span><span>)</span>\n    <span>print</span><span>(</span>sp<span>)</span>\n    <span>print</span><span>(</span>sp2<span>)</span>\n    <span># &lt;__main__.ExerciseSinglePattern object at 0x00000243AF6E4F70></span>\n\t<span># &lt;__main__.ExerciseSinglePattern object at 0x00000243AF6E4F70></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"_2-使用装饰器实现单例模式\" tabindex=\"-1\"> 2. 使用装饰器实现单例模式</h3>\n<h4 id=\"_2-1-装饰器-decorators\" tabindex=\"-1\"> 2.1 装饰器（Decorators）</h4>\n<blockquote>\n<p>装饰器是Python中很重要的内容，属于Python的进阶知识；装饰器的本质可以理解为一个高阶函数，因为它返回的是一个函数对象。装饰器可以在不修改被装饰代码的情况下对代码增加额外的功能，这种动态增加功能的方式，我们称之为“装饰器”.</p>\n</blockquote>\n<p>1️⃣<strong>普通装饰器：</strong></p>\n<p>一般来说，装饰器的基本代码格式为两层嵌套函数，如下所示：</p>\n<div data-ext=\"py\"><pre><code>\n<span># 装饰器</span>\n<span>def</span> <span>decorator</span><span>(</span>func<span>:</span>被装饰函数<span>)</span><span>:</span>\n    <span>def</span> <span>wrapper</span><span>(</span><span>*</span>args<span>,</span> <span>**</span>kwargs<span>)</span><span>:</span><span># *args和**kwargs主要是被装饰函数所需的参数</span>\n        <span># 函数执行前的操作</span>\n        <span>print</span><span>(</span><span>\"Start:\"</span><span>)</span>\n        func<span>(</span><span>*</span>args<span>,</span> <span>**</span>kwargs<span>)</span>\n        <span># 函数执行后的操作</span>\n        <span>print</span><span>(</span><span>\"End\"</span><span>)</span>\n    <span>return</span> wrapper\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>以上就是一个简单的装饰器，如果要使用装饰器，则使用Python中的语法糖<code>@</code></p>\n<div data-ext=\"py\"><pre><code><span># 基本函数</span>\n<span>def</span> <span>test</span><span>(</span>text<span>)</span><span>:</span>\n    <span>print</span><span>(</span>text<span>)</span>\n    \n<span># 使用装饰器后的函数</span>\n<span>@decorator</span>\n<span>def</span> <span>test</span><span>(</span>text<span>)</span><span>:</span>\n    <span>print</span><span>(</span>text<span>)</span>\n<span>if</span> __name__ <span>==</span> <span>'__main__'</span><span>:</span>\n    test<span>(</span><span>'装饰器'</span><span>)</span>\n  \t<span>\"\"\"\n  \tStart:\n\t装饰器\n\tEnd\n  \t\"\"\"</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>2️⃣<strong>带参数的装饰器:</strong></p>\n<blockquote>\n<p>如果装饰器本身需要传递参数，则需要构建一个可以返回装饰器的高阶函数。</p>\n</blockquote>\n<div data-ext=\"py\"><pre><code><span># 带有参数的装饰器</span>\n<span>def</span> <span>logger_decorator</span><span>(</span>log_info<span>)</span><span>:</span>\n    <span># 装饰器</span>\n    <span>def</span> <span>decorator</span><span>(</span>func<span>)</span><span>:</span>\n        <span># 内层函数</span>\n        <span>def</span> <span>wrapper</span><span>(</span><span>*</span>args<span>,</span> <span>**</span>kwargs<span>)</span><span>:</span>\n            <span>print</span><span>(</span><span><span>f\"</span><span><span>{</span>func<span>.</span>__name__<span>}</span></span><span>:</span><span><span>{</span>log_info<span>}</span></span><span>\"</span></span><span>)</span>\n            func<span>(</span><span>*</span>args<span>,</span> <span>**</span>kwargs<span>)</span>\n        <span>return</span> wrapper\n    <span>return</span> decorator\n\n<span># 带有参数的装饰器使用方法如下</span>\n<span>@logger_decorator</span><span>(</span><span>\"Start...\"</span><span>,</span> <span>\"...End\"</span><span>)</span>\n<span>def</span> <span>test2</span><span>(</span><span>)</span><span>:</span>\n    <span>print</span><span>(</span><span>\"正在插入数据\"</span><span>)</span>\n    time<span>.</span>sleep<span>(</span><span>5</span><span>)</span>\n    \n<span>if</span> __name__ <span>==</span> <span>'__main__'</span><span>:</span>\n    <span># test('装饰器')</span>\n    test2<span>(</span><span>)</span>\n    \n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><figure><img src=\"https://raw.githubusercontent.com/lianghexiang/picgo-picture/main/vuepress/image-20231230132509562.png\" alt=\"image-20231230132509562\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20231230132509562</figcaption></figure>\n<p>在我们执行被装饰器装饰的函数时，我们使用函数的方式和普通函数无异，也就是说如果我们想要对<code>test2()</code>函数增加打印执行时间的功能，我们只需要添加一个装饰器，由于函数调用的方式并没有发生变化，所以就无需更改任何原代码就可完成对代码额外功能的增加</p>\n<p>我们来剖析一下上面调用<code>test()</code>函数时，程序的执行流程</p>\n<div data-ext=\"py\"><pre><code><span>#我们在调用test2()函数时，程序的执行顺序如下</span>\nlogger_decorator<span>(</span>arg1<span>,</span>arg2<span>)</span><span>(</span>test2<span>)</span><span>(</span><span>*</span>args<span>,</span><span>**</span>kwargs<span>)</span>\n<span># 1. 首先，执行的是logger_decorator</span>\nlogger_decorator<span>(</span>arg1<span>,</span>arg2<span>)</span>\n<span># 2. 由上面的函数可知，logger_decorator函数返回的是decorator</span>\ndecorator <span>=</span> logger_decorator<span>(</span>arg1<span>,</span>arg2<span>)</span>\n<span># 3. decorator接受一个参数func，这个参数就是被装饰函数的引用，接下来</span>\nwrapper <span>=</span> decorator<span>(</span>test2<span>)</span>\n<span># 4. 其实，在执行test2时，实际上执行的是wrapper</span>\nwrapper<span>(</span><span>*</span>args<span>,</span> <span>**</span>kwargs<span>)</span>\n<span># 以上就是通过装饰器装饰后的函数的整体流程</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>3️⃣:<strong>通过签名调用的函数</strong></p>\n<blockquote>\n<p>上面我们说过，使用装饰器装饰过的函数，使用方法和被装饰前无异，但是有另外一种情况：我们依赖某个函数的签名，即func.<strong>name</strong>，此时我们如果装饰func的话，func.__name__就会发生改变，因为实际上func已经变成了wrapper，所以依赖函数签名的程序就会报错。针对这种情况，我们使用python内置的方法即可解决：functools.wraps函数</p>\n</blockquote>\n<p>如果我们不使用functools.wraps:</p>\n<div data-ext=\"py\"><pre><code><span>def</span> <span>wraps_decorator</span><span>(</span>func<span>)</span><span>:</span>\n    <span>def</span> <span>wrapper</span><span>(</span><span>*</span>args<span>,</span> <span>**</span>kwargs<span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>\"Do Something......\"</span><span>)</span>\n        <span>return</span> func<span>(</span><span>*</span>args<span>,</span> <span>**</span>kwargs<span>)</span>\n    <span>return</span> wrapper\n\n<span>@wraps_decorator</span>\n<span>def</span> <span>wraps_test</span><span>(</span>text<span>)</span><span>:</span>\n    <span>print</span><span>(</span>text<span>)</span>\n    time<span>.</span>sleep<span>(</span><span>2</span><span>)</span>\n<span>if</span> __name__ <span>==</span> <span>'__main__'</span><span>:</span>\n    <span># 我们如果不使用functools.wraps</span>\n    func_name <span>=</span> wraps_test<span>.</span>__name__\n    <span>print</span><span>(</span><span><span>f\"wraps_test函数名称：</span><span><span>{</span>func_name<span>}</span></span><span>\"</span></span><span>)</span>\n    \n    <span>\"\"\"\n    wraps_test函数名称：wrapper\n    \"\"\"</span>\n    \n    <span># 我们可以看到，wraps_test签名变成了wrapper</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><strong>使用functools.wraps</strong>：</p>\n<div data-ext=\"py\"><pre><code><span># 使用方式很简单，通过装饰器的写法装饰内层函数即可</span>\n<span>import</span> functools\n\n\n<span>def</span> <span>wraps_decorator</span><span>(</span>func<span>)</span><span>:</span>\n    <span>@functools<span>.</span>wraps</span><span>(</span>func<span>)</span>\n    <span>def</span> <span>wrapper</span><span>(</span><span>*</span>args<span>,</span> <span>**</span>kwargs<span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>\"Do Something......\"</span><span>)</span>\n        <span>return</span> func<span>(</span><span>*</span>args<span>,</span> <span>**</span>kwargs<span>)</span>\n    <span>return</span> wrapper\n\n<span>@wraps_decorator</span>\n<span>def</span> <span>wraps_test</span><span>(</span>text<span>)</span><span>:</span>\n    <span>print</span><span>(</span>text<span>)</span>\n    time<span>.</span>sleep<span>(</span><span>2</span><span>)</span>\n<span>if</span> __name__ <span>==</span> <span>'__main__'</span><span>:</span>\n\n    <span># 使用functools.wraps</span>\n    func_name <span>=</span> wraps_test<span>.</span>__name__\n    <span>print</span><span>(</span><span><span>f\"wraps_test函数名称：</span><span><span>{</span>func_name<span>}</span></span><span>\"</span></span><span>)</span>\n    <span>\"\"\"\n    wraps_test函数名称：wraps_test\n    \"\"\"</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id=\"_2-2-使用装饰器实现单例模式\" tabindex=\"-1\"> 2.2 使用装饰器实现单例模式</h4>\n<blockquote>\n<p>上面讲解完了装饰器，我们可以了解到装饰器可以拓展函数的功能，接下来我们就使用一点小技巧通过装饰器对类进行装饰，从而实现单例的需求</p>\n</blockquote>\n<div data-ext=\"py\"><pre><code><span># 首先，我们要实现单例模式，和普通单例模式类似，</span>\n<span># 我们要知道某个类A是否已经创建实例，如果已经创建实例则返回，所以我们可以通过字典来实现</span>\n<span># 装饰器单例模式</span>\n<span>def</span> <span>singleton_decorator</span><span>(</span>cls<span>)</span><span>:</span>\n    <span># 创建一个存储类实例的字段</span>\n    _instances <span>=</span> <span>{</span><span>}</span>\n    <span>def</span> <span>wrapper</span><span>(</span><span>*</span>args<span>,</span> <span>**</span>kwargs<span>)</span><span>:</span>\n        <span>if</span> cls <span>not</span> <span>in</span> _instances<span>:</span>\n            _instances<span>[</span>cls<span>]</span> <span>=</span> cls<span>(</span><span>*</span>args<span>,</span> <span>**</span>kwargs<span>)</span>\n        <span>return</span> _instances<span>[</span>cls<span>]</span>\n    <span>return</span> wrapper\n\n\n<span>@singleton_decorator</span>\n<span>class</span> <span>DecoratorSingleton</span><span>:</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> name<span>=</span><span>None</span><span>)</span><span>:</span>\n        self<span>.</span>name <span>=</span> name\n\n<span>if</span> __name__ <span>==</span> <span>'__main__'</span><span>:</span>\n    dt_singleton <span>=</span> DecoratorSingleton<span>(</span><span>\"Decorator Singleton\"</span><span>)</span>\n    <span>print</span><span>(</span>dt_singleton<span>)</span>\n    dt_singleton2 <span>=</span> DecoratorSingleton<span>(</span><span>\"Decorator Singleton2\"</span><span>)</span>\n    <span>print</span><span>(</span>dt_singleton2<span>)</span>\n    <span>\"\"\"\n    &lt;__main__.DecoratorSingleton object at 0x000002AFB008FBB0>\n\t&lt;__main__.DecoratorSingleton object at 0x000002AFB008FBB0>\n    \"\"\"</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"_3-单态模式-单例模式的一种\" tabindex=\"-1\"> 3. 单态模式(单例模式的一种)</h3>\n<blockquote>\n<p>单例模式是指，一个类只有一个对象，然而，单态模式更关心的是状态和行为，即所有对象共享相同的状态，所以基于这类思想设计的类也叫做Monostate(单态)模式</p>\n</blockquote>\n<p>我们知道，在Python独享中，__dict___存储了一个对象所有的变量，所以如果我们在实例化对象时所有对象的<code>__dict__</code>指向的是同一个引用，那么当某个实例a更改了属性，那么其他实例也能同步，达到所有对象共享相同状态的目的。</p>\n<div data-ext=\"py\"><pre><code><span>\"\"\"\n单态模式的实现\n\"\"\"</span>\n<span>class</span> <span>Borg</span><span>:</span>\n    <span># 类属性</span>\n    __shared_state <span>=</span> <span>{</span><span>'name'</span><span>:</span> <span>None</span><span>}</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>)</span><span>:</span>\n        self<span>.</span>__dict__ <span>=</span> self<span>.</span>__shared_state\n\n\n<span>if</span> __name__ <span>==</span> <span>'__main__'</span><span>:</span>\n    a <span>=</span> Borg<span>(</span><span>)</span>\n    b <span>=</span> Borg<span>(</span><span>)</span>\n    <span># 此时，如果对a设置属性age，则b也会被赋予属性age</span>\n    a<span>.</span>age <span>=</span> <span>20</span>\n\n    <span>print</span><span>(</span>a<span>.</span>age<span>)</span>\n    <span>print</span><span>(</span>b<span>.</span>age<span>)</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>单态模式还可以通过<code>__new__</code>方法实现:</p>\n<div data-ext=\"py\"><pre><code><span>class</span> <span>NewBorg</span><span>:</span>\n    __shared_state <span>=</span> <span>{</span><span>}</span>\n    <span># TODO 1 重新new方法</span>\n    <span>def</span> <span>__new__</span><span>(</span>cls<span>,</span> <span>*</span>args<span>,</span> <span>**</span>kwargs<span>)</span><span>:</span>\n        <span># TODO 2 生成shili</span>\n        borg_obj <span>=</span> <span>super</span><span>(</span><span>)</span><span>.</span>__new__<span>(</span>cls<span>,</span> <span>*</span>args<span>,</span> <span>**</span>kwargs<span>)</span>\n        <span># TODO 3 将实例的__dict__指向类属性__shared_state</span>\n        borg_obj<span>.</span>__dict__ <span>=</span> cls<span>.</span>__shared_state\n        <span>return</span> borg_obj\n    \n    <span>def</span> <span>__init__</span><span>(</span>self<span>)</span><span>:</span>\n        self<span>.</span>name <span>=</span> <span>'Borg1'</span>\n        \n        \n<span>if</span> __name__ <span>==</span> <span>'__main__'</span><span>:</span>\n    a <span>=</span> Borg<span>(</span><span>)</span>\n    b <span>=</span> Borg<span>(</span><span>)</span>\n    <span># 此时，如果对a设置属性age，则b也会被赋予属性age</span>\n    a<span>.</span>age <span>=</span> <span>20</span>\n\n    <span>print</span><span>(</span>a<span>.</span>age<span>)</span>\n    <span>print</span><span>(</span>b<span>.</span>age<span>)</span>\n\n\n    new_borg <span>=</span> NewBorg<span>(</span><span>)</span>\n    new_borg_2 <span>=</span> NewBorg<span>(</span><span>)</span>\n    <span>print</span><span>(</span><span><span>f\"更新name属性前：</span><span><span>{</span>new_borg<span>.</span>name<span>}</span></span><span>\"</span></span><span>)</span> <span># 更新name属性前：Borg1</span>\n    <span># 更改name属性</span>\n    new_borg_2<span>.</span>name <span>=</span> <span>\"Borg2\"</span>\n    <span>print</span><span>(</span><span><span>f\"更新name属性后：</span><span><span>{</span>new_borg<span>.</span>name<span>}</span></span><span>\"</span></span><span>)</span> <span># 更新name属性后：Borg2</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"_4-单例和元类\" tabindex=\"-1\"> 4. 单例和元类</h3>\n<h4 id=\"_4-1-元类\" tabindex=\"-1\"> 4.1 元类</h4>\n<blockquote>\n<p>我们先来简单的了解一下元类，元类的意思是一个类的类，这意味着类是元类的实例。使用元类，我们有机会从预定义的Python类中创建自己想要的类型的类。下面我们来通过实例来体会一下什么是元类。</p>\n</blockquote>\n<div data-ext=\"py\"><pre><code>a <span>=</span> <span>10</span>\n<span>print</span><span>(</span><span>type</span><span>(</span>a<span>)</span><span>)</span>  <span># &lt;class 'int'></span>\n<span>print</span><span>(</span><span>type</span><span>(</span><span>int</span><span>)</span><span>)</span>  <span># &lt;class 'type'></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><p>类的定义有它的元类决定，当我们创建一个类A时，Python则是相当于实例化了type类: <code>A=type(name,bases,dict)</code>。</p>\n<ul>\n<li><strong>name</strong> : 这是类的名称</li>\n<li><strong>bases</strong>: 这是基类</li>\n<li><strong>dict</strong>：这是类的属性变量</li>\n</ul>\n<h4 id=\"_4-2-元类实现单例模式\" tabindex=\"-1\"> 4.2 元类实现单例模式</h4>\n<p>接下来我们看一下简单的元类示例：</p>\n<div data-ext=\"py\"><pre><code><span>class</span> <span>MyInt</span><span>(</span><span>type</span><span>)</span><span>:</span>\n    <span># __call__方法在类以函数方式调用的时候被触发</span>\n    <span>def</span> <span>__call__</span><span>(</span>cls<span>,</span> <span>*</span>args<span>,</span> <span>**</span>kwargs<span>)</span><span>:</span>\n        <span>print</span><span>(</span><span>\"*** 自定义元类 Int类型 ***\"</span><span>,</span> args<span>)</span>\n        <span>print</span><span>(</span><span>\"在这里可以自定义你自己的类的行为.....\"</span><span>)</span>\n        <span>return</span> <span>type</span><span>.</span>__call__<span>(</span>cls<span>,</span> <span>*</span>args<span>,</span> <span>**</span>kwargs<span>)</span>\n\n<span># 使用上面自定义的元类来创建int类型</span>\n<span>class</span> <span>int</span><span>(</span>metaclass<span>=</span>MyInt<span>)</span><span>:</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> x<span>,</span> y<span>)</span><span>:</span>\n        self<span>.</span>x <span>=</span> x\n        self<span>.</span>y <span>=</span> y\n        \n<span>if</span> __name__ <span>==</span> <span>'__main__'</span><span>:</span>\n    my_int <span>=</span> <span>int</span><span>(</span><span>10</span><span>,</span> <span>20</span><span>)</span>\n<span># 以下是上面代码的输出结果</span>\n<span>**</span><span>*</span> 自定义元类 Int类型 <span>**</span><span>*</span> <span>(</span><span>10</span><span>,</span> <span>20</span><span>)</span>\n在这里可以自定义你自己的类的行为<span>.</span><span>.</span><span>.</span><span>.</span><span>.</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>将需要创建对象时，Python将调用<code>__call__</code>方法，所以上面在创建my_int对象时<code>MyInt</code>就会调用我们自定义的<code>__call__</code>方法。</p>\n<p>由于元类对对象的实例化有更多的控制权，所以它可以用来创建单例。</p>\n<p>下面我们基于元类来实现单例：</p>\n<div data-ext=\"py\"><pre><code><span># 使用元类创建单例</span>\n<span>class</span> <span>MetaSingleton</span><span>(</span><span>type</span><span>)</span><span>:</span>\n    _instances <span>=</span> <span>{</span><span>}</span>\n    <span># 覆盖type的__call__方法</span>\n\n    <span>def</span> <span>__call__</span><span>(</span>cls<span>,</span> <span>*</span>args<span>,</span> <span>**</span>kwargs<span>)</span><span>:</span>\n        <span>if</span> cls <span>not</span> <span>in</span> cls<span>.</span>_instances<span>:</span>\n            cls<span>.</span>_instances<span>[</span>cls<span>]</span> <span>=</span> <span>super</span><span>(</span>MetaSingleton<span>,</span> cls<span>)</span><span>.</span>__call__<span>(</span><span>*</span>args<span>,</span> <span>**</span>kwargs<span>)</span>\n        <span>return</span> cls<span>.</span>_instances<span>[</span>cls<span>]</span>\n\n\n<span>class</span> <span>Logger</span><span>(</span>metaclass<span>=</span>MetaSingleton<span>)</span><span>:</span>\n    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> level<span>)</span><span>:</span>\n        self<span>.</span>level <span>=</span> level\n\n\n<span>if</span> __name__ <span>==</span> <span>'__main__'</span><span>:</span>\n    my_int <span>=</span> <span>int</span><span>(</span><span>10</span><span>,</span> <span>20</span><span>)</span>\n\n    logger_1 <span>=</span> Logger<span>(</span><span>'info'</span><span>)</span>\n    logger_2 <span>=</span> Logger<span>(</span><span>'error'</span><span>)</span>\n    <span>print</span><span>(</span>logger_1<span>)</span>\n    <span>print</span><span>(</span>logger_2<span>)</span>\n    \n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>以下是上面代码的输出：</p>\n<div data-ext=\"py\"><pre><code><span>>></span><span>>></span><span>>></span>\n<span>&lt;</span>__main__<span>.</span>Logger <span>object</span> at <span>0x00000204A6EFFCA0</span><span>></span>\n<span>&lt;</span>__main__<span>.</span>Logger <span>object</span> at <span>0x00000204A6EFFCA0</span><span>></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><p>在上面的代码中，我们通过继承<code>type</code>类，然后重写<code>__call__</code>的方法，每次创建实例的时候都去<code>_instances</code>中去寻找已经创建的实例，然后返回。</p>\n<h3 id=\"_5-单例模式的缺点\" tabindex=\"-1\"> 5. 单例模式的缺点</h3>\n<p>单例具有全局访问权限，因此会存在以下问题。</p>\n<p>全局变量可能在某处代码被修改，但是开发人员并未注意到，如果有其它地方也使用，可能会发生异常。</p>\n<p>由于单例只能创建一次，所以会有多个引用指向同一个对象。</p>\n<p>所有依赖全局变量的类都会由于一个类的改变而紧密耦合为全局数据，从而可能无意中影响另一个类。</p>\n",
      "image": "https://img.tucang.cc/api/image/show/6c8acb93bd0fc9dd85006746d572df8f",
      "date_published": "2024-01-03T00:00:00.000Z",
      "date_modified": "2024-06-24T01:38:14.000Z",
      "authors": [],
      "tags": [
        "python"
      ]
    },
    {
      "title": "工厂模式",
      "url": "https://lianghexiang.github.io/space/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.html",
      "id": "https://lianghexiang.github.io/space/design_pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.html",
      "content_html": "<h1 id=\"工厂模式\" tabindex=\"-1\"> 工厂模式</h1>\n<h3 id=\"_1-前言\" tabindex=\"-1\"> 1. 前言</h3>\n<p>在本文章中，主要包含以下几个方面的主题：</p>\n<ol>\n<li>了解简单工厂设计模式；</li>\n<li>讨论工厂方法和抽象工厂方法及其差异；</li>\n<li>利用Python代码实现真实场景；</li>\n<li>讨论模式的优缺点并进行相应的比较。</li>\n</ol>\n<h3 id=\"_2-了解工厂模式\" tabindex=\"-1\"> 2. 了解工厂模式</h3>\n<p>在面向对象编程中，术语“工厂”表示一个负责创建其他类型对象的类。通常情况下，作为一个工厂的类有一个对象以及与它关联的多个方法。客户端使用某些参数调用此方法，之后，工厂会据此创建所需类型的对象，然后将它们返回给客户端。</p>\n<p>❓其实客户端可以直接创建对象，那么为什么需要工厂？</p>\n<p>1️⃣<strong>松耦合</strong>：即对象的创建可以独立于类的实现。</p>\n",
      "image": "https://img.tucang.cc/api/image/show/6c8acb93bd0fc9dd85006746d572df8f",
      "date_published": "2024-01-03T00:00:00.000Z",
      "date_modified": "2024-01-20T06:42:30.000Z",
      "authors": [],
      "tags": [
        "python"
      ]
    },
    {
      "title": "Python添加Linux环境变量",
      "url": "https://lianghexiang.github.io/space/posts/python/Python%E6%B7%BB%E5%8A%A0%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.html",
      "id": "https://lianghexiang.github.io/space/posts/python/Python%E6%B7%BB%E5%8A%A0%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.html",
      "content_html": "<h1 id=\"python添加linux环境变量\" tabindex=\"-1\"> Python添加Linux环境变量</h1>\n",
      "image": "https://img.tucang.cc/api/image/show/5383cab4c54b110f368ce995153f0de3",
      "date_published": "2023-12-06T00:00:00.000Z",
      "date_modified": "2023-12-07T01:25:24.000Z",
      "authors": [],
      "tags": [
        "python"
      ]
    },
    {
      "title": "Python2转Python3",
      "url": "https://lianghexiang.github.io/space/posts/python/Python2%E8%BD%ACPython3.html",
      "id": "https://lianghexiang.github.io/space/posts/python/Python2%E8%BD%ACPython3.html",
      "content_html": "<h1 id=\"python2转python3\" tabindex=\"-1\"> Python2转Python3</h1>\n<h3 id=\"工具介绍\" tabindex=\"-1\"> 工具介绍</h3>\n<p>💭 工具：<a href=\"http://2to3.py\" target=\"_blank\" rel=\"noopener noreferrer\">2to3.py</a></p>\n<p>2to3.py是一个脚本文件，是Anaconda管理器自带的脚本文件，通常可以在anaconda的安装路径下找到，可能由于anaconda的版本不同，2to3.py文件的名字也可能略有差异，但总的来说都可以通过2to3关键字来辨别。</p>\n<h3 id=\"使用\" tabindex=\"-1\"> 使用</h3>\n<ol>\n<li>转单个py文件</li>\n</ol>\n<p>​\t如果是转单个py文件的话可以直接把py文件的路径输入到命令之后</p>\n<div data-ext=\"sh\"><pre><code>python 2to3.py  <span>-w</span>  D:/file.py\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><ol start=\"2\">\n<li>批量转文件夹下的py文件</li>\n</ol>\n<div data-ext=\"sh\"><pre><code><span># 如果是想转文件夹下的文件，则将文件夹的路径输入到命令之后，并且以'\\'结尾</span>\nPython 2to3.py <span>-w</span> E:<span>\\</span><span>\\</span>Test<span>\\</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div></div></div>",
      "image": "https://img.tucang.cc/api/image/show/72e720a5032441381e8d626f0e6538f1",
      "date_published": "2023-09-26T00:00:00.000Z",
      "date_modified": "2023-10-13T03:00:40.000Z",
      "authors": [],
      "tags": [
        "python"
      ]
    },
    {
      "title": "Linux配置环境变量",
      "url": "https://lianghexiang.github.io/space/posts/Linux/Linux%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.html",
      "id": "https://lianghexiang.github.io/space/posts/Linux/Linux%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.html",
      "content_html": "<h1 id=\"linux配置环境变量\" tabindex=\"-1\"> Linux配置环境变量</h1>\n<h3 id=\"_1-查看所有变量\" tabindex=\"-1\"> 1. 查看所有变量</h3>\n<div data-ext=\"sh\"><pre><code><span># 使用env</span>\nlianghexiang@ubuntu:~$ <span>env</span> \n\n<span># 使用export</span>\nlianghexiang@ubuntu:~$ <span>export</span> \n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"_2-查看一个变量\" tabindex=\"-1\"> 2. 查看一个变量</h3>\n<div data-ext=\"sh\"><pre><code>lianghexiang@ubuntu:~$ <span>echo</span> <span>${变量名}</span>\n<span># 或者</span>\nlianghexiang@ubuntu:~$ <span>env</span> <span>|</span> <span>grep</span> 变量名\n<span># 或者</span>\nlianghexiang@ubuntu:~$ <span>export</span> <span>|</span> <span>grep</span> 变量名\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"_3-设置变量\" tabindex=\"-1\"> 3. 设置变量</h3>\n<h4 id=\"_1-临时设置\" tabindex=\"-1\"> 1. 临时设置</h4>\n<div data-ext=\"sh\"><pre><code><span># 执行export 这个设置仅限当前终端有效，窗口关闭后无效</span>\n<span># 其中PATH变量定义了运行命令的查找路径，以冒号:分割不同的路径，如，/home/yan/share/usr/local/arm/3.4.1/bin 这个就表示一个软件的路径了，多个软件就用:分开，如 /usr/local/LAMP/php/bin:/usr/local/LAMP/mysql/bin</span>\nlianghexiang@ubuntu:~$ <span>export</span> <span><span>PATH</span></span><span>=</span><span>$PATH</span>:路径\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><h4 id=\"_2-当前登录用户的全局变量\" tabindex=\"-1\"> 2. 当前登录用户的全局变量</h4>\n<div data-ext=\"sh\"><pre><code><span># 修改.bashrc文件</span>\n<span>vim</span> ~/.bashrc\n<span># 在该文件末尾添加如下行 path是要添加的变量的路径</span>\n<span>export</span> <span><span>PATH</span></span><span>=</span>path:<span>$PATH</span>\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"_3-测试\" tabindex=\"-1\"> 3. 测试</h3>\n<div data-ext=\"sh\"><pre><code><span># 执行查看命令</span>\n<span>echo</span> <span>$PATH</span>\n<span># 或者</span>\n<span>env</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div>",
      "image": "https://img.tucang.cc/api/image/show/64a50296cae6612fb1468ddb15110c75",
      "date_published": "2023-07-28T00:00:00.000Z",
      "date_modified": "2023-07-28T02:40:26.000Z",
      "authors": [],
      "tags": [
        "技术"
      ]
    },
    {
      "title": "Mysql知识积累",
      "url": "https://lianghexiang.github.io/space/posts/mysql/mysql%E5%A4%87%E5%BF%98%E5%BD%95.html",
      "id": "https://lianghexiang.github.io/space/posts/mysql/mysql%E5%A4%87%E5%BF%98%E5%BD%95.html",
      "content_html": "<h1 id=\"mysql知识积累\" tabindex=\"-1\"> Mysql知识积累</h1>\n<h3 id=\"_1-mysql内置函数\" tabindex=\"-1\"> 1. Mysql内置函数</h3>\n<h4 id=\"_1-instr\" tabindex=\"-1\"> 1. instr</h4>\n<p>简介：</p>\n<blockquote>\n<p>函数返回字符串中子字符串第一次出现的位置.如果在str中找不到子字符串，则INSTR()函数返回零(0)</p>\n</blockquote>\n<p>使用场景：</p>\n<blockquote>\n<p>想要在字符串中查找子字符串或检查字符串中是否存在子字符串。</p>\n</blockquote>\n<p>函数语法:</p>\n<div data-ext=\"sql\"><pre><code>INSTR<span>(</span>str<span>,</span>substr<span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p><code>INSTR</code>函数接受两个参数：<strong>str</strong>是要搜索的字符串,<strong>substr</strong>是要搜索的子字符串。</p>\n<h4 id=\"_2-substr\" tabindex=\"-1\"> 2. substr</h4>\n<p>简介：</p>\n<blockquote>\n<p>substr从字符串中提取特定长度的子字符串</p>\n</blockquote>\n<p>使用场景：</p>\n<blockquote>\n<p>想要通过索引截取字符串的一部分。</p>\n</blockquote>\n<p>函数语法：</p>\n<div data-ext=\"sql\"><pre><code>substr<span>(</span>string string<span>,</span>num <span>start</span><span>,</span>num length<span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>string为字符串；start为起始位置；length为长度。</p>\n<p>⚠️start是从1开始的</p>\n<h4 id=\"_3-case-when的用法\" tabindex=\"-1\"> 3. CASE.....WHEN的用法</h4>\n<h3 id=\"_2-查询\" tabindex=\"-1\"> 2. 查询</h3>\n<h4 id=\"_1-1子查询\" tabindex=\"-1\"> 1. 1子查询</h4>\n<p>子查询指一个查询语句嵌套在另一个查询语句内部的查询，这个特性从MySQL 4.1开始引入</p>\n<h5 id=\"子查询操作符\" tabindex=\"-1\"> 子查询操作符</h5>\n<ol>\n<li>\n<p>ANY（SOME）</p>\n<blockquote>\n<p>ANY和SOME关键字是同义词，表示满足其中任一条件，它们允许创建一个表达式对子查询的返回值列表进行比较，只要满足内层子查询中的任何一个比较条件，就返回一个结果作为外层查询的条件</p>\n</blockquote>\n<figure><img src=\"https://cdn.nlark.com/yuque/0/2023/png/21881466/1680257852246-b1c2996b-aa6e-4079-a290-d35c23b2515c.png\" alt=\"img\" tabindex=\"0\" loading=\"lazy\"><figcaption>img</figcaption></figure>\n</li>\n<li>\n<p>ALL</p>\n<blockquote>\n<p>ALL关键字与ANY和SOME不同，使用ALL时需要同时满足所有内层查询的条件。</p>\n</blockquote>\n<figure><img src=\"https://cdn.nlark.com/yuque/0/2023/png/21881466/1680257896133-1033c011-39b3-4270-8244-2afdd83a4d38.png\" alt=\"img\" tabindex=\"0\" loading=\"lazy\"><figcaption>img</figcaption></figure>\n</li>\n<li>\n<p>IN</p>\n<blockquote>\n<p>IN关键字进行子查询时，内层查询语句仅仅返回一个数据列，这个数据列里的值将提供给外层查询语句进行比较操作。</p>\n</blockquote>\n<figure><img src=\"https://cdn.nlark.com/yuque/0/2023/png/21881466/1680258121818-4baff6c0-ea14-4415-9f9f-7e5a590379f5.png\" alt=\"img\" tabindex=\"0\" loading=\"lazy\"><figcaption>img</figcaption></figure>\n</li>\n<li>\n<p>EXISTS</p>\n<blockquote>\n<p>EXISTS关键字后面的参数是一个任意的子查询，系统对子查询进行运算以判断它是否返回行，如果至少返回一行，那么EXISTS的结果为true，此时外层查询语句将进行查询；如果子查询没有返回任何行，那么EXISTS返回的结果是false，此时外层语句将不进行查询。</p>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"_2-2-regexp的用法\" tabindex=\"-1\"> 2.2 <code>REGEXP</code>的用法</h4>\n<p>REGEXP 是用于进行正则表达式匹配的运算符。</p>\n<p>**<code>like</code><strong>关键字可以进行模糊匹配，Mysql同样也支持正则表达式的匹配，Mysql中使用</strong><code>REGEXP</code><strong>和</strong><code>RLIKE</code>**操作符来进行正则表达式匹配。</p>\n<p>可用于**<code>REGEXP</code>**的正则模式:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">模式</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">^</td>\n<td style=\"text-align:left\">匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 '\\n' 或 '\\r' 之后的位置。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$</td>\n<td style=\"text-align:left\">匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 '\\n' 或 '\\r' 之前的位置。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">.</td>\n<td style=\"text-align:left\">匹配除 &quot;\\n&quot; 之外的任何单个字符。要匹配包括 '\\n' 在内的任何字符，请使用像 '[.\\n]' 的模式。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[...]</td>\n<td style=\"text-align:left\">字符集合。匹配所包含的任意一个字符。例如， '[abc]' 可以匹配 &quot;plain&quot; 中的 'a'。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[^...]</td>\n<td style=\"text-align:left\">负值字符集合。匹配未包含的任意字符。例如， '[^abc]' 可以匹配 &quot;plain&quot; 中的'p'。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">p1|p2|p3</td>\n<td style=\"text-align:left\">匹配 p1 或 p2 或 p3。例如，'z|food' 能匹配 &quot;z&quot; 或 &quot;food&quot;。'(z|f)ood' 则匹配 &quot;zood&quot; 或 &quot;food&quot;。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">*</td>\n<td style=\"text-align:left\">匹配前面的子表达式零次或多次。例如，zo* 能匹配 &quot;z&quot; 以及 &quot;zoo&quot;。* 等价于{0,}。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">+</td>\n<td style=\"text-align:left\">匹配前面的子表达式一次或多次。例如，'zo+' 能匹配 &quot;zo&quot; 以及 &quot;zoo&quot;，但不能匹配 &quot;z&quot;。+ 等价于 {1,}。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\" n=\"\"></td>\n<td style=\"text-align:left\">n 是一个非负整数。匹配确定的 n 次。例如，'o{2}' 不能匹配 &quot;Bob&quot; 中的 'o'，但是能匹配 &quot;food&quot; 中的两个 o。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\" n,m=\"\"></td>\n<td style=\"text-align:left\">m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。</td>\n</tr>\n</tbody>\n</table>\n<p>💁‍♂️ 复习一下正则表达式的字符类吧：</p>\n<ul>\n<li><code>.</code>：匹配任意单个字符。</li>\n<li><code>^</code>：匹配字符串的开始。</li>\n<li><code>$</code>：匹配字符串的结束。</li>\n<li><code>*</code>：匹配零个或多个前面的元素。</li>\n<li><code>+</code>：匹配一个或多个前面的元素。</li>\n<li><code>?</code>：匹配零个或一个前面的元素。</li>\n<li><code>[abc]</code>：匹配字符集中的任意一个字符。</li>\n<li><code>[^abc]</code>：匹配除了字符集中的任意一个字符以外的字符。</li>\n<li><code>[a-z]</code>：匹配范围内的任意一个小写字母。</li>\n<li><code>\\d</code>：匹配一个数字字符。</li>\n<li><code>\\w</code>：匹配一个字母数字字符（包括下划线）。</li>\n<li><code>\\s</code>：匹配一个空白字符。</li>\n</ul>\n<p>下面我们从几个案例来学习一下**<code>REGEXP</code>**的基本使用：</p>\n<div data-ext=\"sql\"><pre><code><span>SELECT</span> column1<span>,</span> column2<span>,</span> <span>.</span><span>.</span><span>.</span>\n<span>FROM</span> table_name\n<span>WHERE</span> column_name <span>REGEXP</span> <span>'pattern'</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><p><strong>参数说明：</strong></p>\n<ul>\n<li><code>column1</code>, <code>column2</code>, ... 是你要选择的列的名称，如果使用 <code>*</code> 表示选择所有列。</li>\n<li><code>table_name</code> 是你要从中查询数据的表的名称。</li>\n<li><code>column_name</code> 是你要进行正则表达式匹配的列的名称。</li>\n<li><code>'pattern'</code> 是一个正则表达式模式。</li>\n</ul>\n<ol>\n<li><strong>查找 name 字段中以 'st' 为开头的所有数据：</strong></li>\n</ol>\n<div data-ext=\"sql\"><pre><code>mysql<span>></span> <span>SELECT</span> name <span>FROM</span> person_tbl <span>WHERE</span> name <span>REGEXP</span> <span>'^st'</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><ol start=\"2\">\n<li>\n<p><strong>查找 name 字段中以 <strong>'ok'</strong> 为结尾的所有数据：</strong></p>\n<div data-ext=\"sql\"><pre><code>mysql<span>></span> <span>SELECT</span> name <span>FROM</span> person_tbl <span>WHERE</span> name <span>REGEXP</span> <span>'ok$'</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div></li>\n<li>\n<p><strong>查找 name 字段中包含 <strong>'mar'</strong> 字符串的所有数据：</strong></p>\n<div data-ext=\"sql\"><pre><code>mysql<span>></span> <span>SELECT</span> name <span>FROM</span> person_tbl <span>WHERE</span> name <span>REGEXP</span> <span>'mar'</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div></li>\n<li>\n<p>查找 name 字段中以元音字符开头或以 <strong>'ok'</strong> 字符串结尾的所有数据：</p>\n<div data-ext=\"sql\"><pre><code>mysql<span>></span> <span>SELECT</span> name <span>FROM</span> person_tbl <span>WHERE</span> name <span>REGEXP</span> <span>'^[aeiou]|ok$'</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div></li>\n<li>\n<p>选择订单表中描述中包含 &quot;item&quot; 后跟一个或多个数字的记录。</p>\n<div data-ext=\"sql\"><pre><code><span>SELECT</span> <span>*</span> <span>FROM</span> orders <span>WHERE</span> order_description <span>REGEXP</span> <span>'item[0-9]+'</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div></li>\n<li>\n<p>使用 <strong>BINARY</strong> 关键字，使得匹配区分大小写：</p>\n<div data-ext=\"sql\"><pre><code><span>SELECT</span> <span>*</span> <span>FROM</span> products <span>WHERE</span> product_name <span>REGEXP</span> <span>BINARY</span> <span>'apple'</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div></li>\n<li>\n<p>使用 OR 进行多个匹配条件，以下将选择姓氏为 &quot;Smith&quot; 或 &quot;Johnson&quot; 的员工记录：</p>\n<div data-ext=\"sql\"><pre><code><span>SELECT</span> <span>*</span> <span>FROM</span> employees <span>WHERE</span> last_name <span>REGEXP</span> <span>'Smith|Johnson'</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div></li>\n</ol>\n<p><strong>📖</strong> <strong>RLIKE 是 MySQL 中用于进行正则表达式匹配的运算符，与 REGEXP 是一样的，RLIKE 和 REGEXP 可以互换使用，没有区别。</strong></p>\n<h3 id=\"_3-插入\" tabindex=\"-1\"> 3. 插入</h3>\n<h4 id=\"_2-1-ingore\" tabindex=\"-1\"> 2.1 ingore</h4>\n<p>插入数据时，如果数据已经存在，则不再执行插入</p>\n<h3 id=\"_4-修改\" tabindex=\"-1\"> 4. 修改</h3>\n<h3 id=\"_5-删除\" tabindex=\"-1\"> 5. 删除</h3>\n<h3 id=\"_6-存储过程和函数\" tabindex=\"-1\"> 6. 存储过程和函数</h3>\n<h4 id=\"_1-存储过程\" tabindex=\"-1\"> 1. 存储过程</h4>\n<h3 id=\"_7-地理类型\" tabindex=\"-1\"> 7. 地理类型</h3>\n<h5 id=\"_1-使用st-distance-sphere函数计算经纬度距离\" tabindex=\"-1\"> 1. 使用<code>ST_Distance_Sphere</code>函数计算经纬度距离</h5>\n",
      "image": "https://img.tucang.cc/api/image/show/be92f3fc23a4ba0672923f5f05c7e08b",
      "date_published": "2024-01-20T00:00:00.000Z",
      "date_modified": "2024-01-28T08:55:44.000Z",
      "authors": [],
      "tags": [
        "技术"
      ]
    },
    {
      "title": "介绍页",
      "url": "https://lianghexiang.github.io/space/intro.html",
      "id": "https://lianghexiang.github.io/space/intro.html",
      "content_html": "<h1 id=\"介绍页\" tabindex=\"-1\"> 介绍页</h1>\n<p>我所在的位置：中国河南省<br>\n联系方式：<br>\n🐧 QQ：1973749775</p>\n<p>📧邮箱:lhx110396@163.com</p>\n<p>💻目前在郑州工作</p>\n<p>👋 你好！我的介绍页<br>\n既然茫茫人海中你能来到我的个人主页，这也是一种邂逅! ✨</p>\n<p>我热衷于分享最新的科技趋势和创新的编程技巧，致力于让技术变得更加容易理解和应用。我相信技术可以改变世界，而我希望成为这个变革的一部分。🌍💪</p>\n<p>📚 在我的博客中，你将发现我对编程语言、前端开发、人工智能和数据科学等领域的深入研究和经验分享。无论你是初学者还是经验丰富的开发者，我都将为你提供有价值的内容和实用的建议。🎓🚀</p>\n<p>🌱 我认为学习是持续的过程，因此我致力于不断拓展自己的知识和技能。我不仅保持对最新技术的追踪，还乐于探索新的编程范式和工具。我相信通过不断学习和探索，我们可以超越自己的边界并实现令人惊叹的创新。🌈🔍</p>\n<p>🤝 我欢迎与各位读者和同行建立联系，并共同探索技术世界的奇妙之处。如果你对我博客中的任何主题感兴趣，或者想要进行深入讨论，别犹豫，和我联系吧！💌🤗</p>\n<p>✨ 无论你是想了解新技术、解决编程难题还是追求个人成长，我都希望我的博客能够成为你的指南之一。让我们一起在代码的世界中留下印记，一起创造更加美好的未来！🌟</p>\n",
      "image": "https://img.tucang.cc/api/image/show/6c8acb93bd0fc9dd85006746d572df8f",
      "date_published": "2023-07-07T06:08:45.000Z",
      "date_modified": "2023-12-22T00:47:39.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "幻灯片页",
      "url": "https://lianghexiang.github.io/space/slides.html",
      "id": "https://lianghexiang.github.io/space/slides.html",
      "content_html": "\n<Presentation id=\"presentation-1\" code=\"eJzNWV9TGlkWf+dT3DHzoG4ag9mprXJG32ZqaiupfcnDVjlWGrGjrAgWNBlrN5siQUQMCJmoKGIEo5FMFJ2JMfwR+S4zfW93P818hDm3bwMNQYFgJvNAcetyzu/8ueece+7B9NVnHIfMHod9QhhCE1bRyoluq9NjF+0u53CPtt+DOG7EZLp2DeF8UX50JIeC5GxF3i2YdG7BIcwITnEI2RxWj2e4x83ds4ucKMyJOquU80m5H+WsD0dW5cR8A4yUW8axeXk/go+jyskJfvH6V9/jtrFHkFRKKr4Auu02f+uaFcxIOXpHigm8lFHPUiQVhLVSyirlTRzYk3JPQBc1/dZk4jhOs4lSvMlUVWpb7ujv20+DY73XBiwDlj4K1xWaVCrLKxnEg1a8DkKOT3D+TUuoe27rJN1A96wTAmd36oA42Qgg5Q5rUniEFxdw6Gf8/LG8CWQfJqSCVxdEZrOZ/goSkjVHSLkl8q6Il1L4p+fEt9+VnCpTnaRQhEUZ+vbO7VsIB/zySao7qVqEtJUf2r7VK7o4q9M+YxWFasbctrqnJ1zfOzsIhBSOHknFvXrvVY6uggdBfkjeaMmkpQ6EjJI9NrctprlpLUzoVrdrgKaUN8j6UeWobppM8Ku6s64W15XsrnSWUII/QuYqpQMS2ZFyBby7jxc2tHpg5CTJkLzlQ/398s9xqfSsv/86ukvWkrC8ex09fIgXU+rGrlwoP3yIyFoQH8Zx/hSHAzj2Go0yBPXZOVneG+udEsVZz9DAwIx7ihYPOFihD4HqJPtWiZV+OwsDp5RbwVl/VTnQTEmHQScS8oEzwCsknlKTPvIkgMt+oAR2dbWMCy81vT+Jq/FiXElndK/mCoi3Ox12p8CNO1y2aR6UQmo6L29mmyxMFrO+RBbDetCwhmP7NFYlMxQidqRVgyn75JQDPiJUzOgPUvEUx5bhwKTiCzn1CG/Fqwemvl6XClntMHie/4/HZHM5PSKyomFk+ZJu/SXMASFTDZaUUlJ+m4nQMe98/W+4Hs7wWZRtkNVjfPgSBw5gRzPw889N/+z9TpwSROvdG9f1haUPTP3O4525+z/78I3/U6JPY/EviVR/P72f4Xqbj/b3DyGIUmrPD2F2H0HOake4h6NLkF6Q51IuAsJq0ICFgwtMAEimMhYCOJvHW6BIBEfjZOWIhB/pqdd9Bcc5P/7Jd5WF9UOhoeFYQHxtm2eUiMZ59pVe5yCkchHlNICDheoBKWE/3jyhRc0fwAtvoQnCxyU4R8VfgvrabpF6T+3PRm+5Jl1jvQMO+DJ77k9CG3SRKR7RLYi2qQZL9N2KITiXxUuvaD1d3seLp7SRCuzhzXPaKS6uKfsL6s5Tet5wJxxHtfwo07pcPMDp1zgQIMV01WTW15C1PI49hS6AcoUAeUN+VVDjJ+2arO2MW23Tk26X1znB2VwOlxvMmRzv/ceN64h+Br/4os/QIOuu0W46f5hsHBlyRvUllHIQFJJDeZxN1LpgrUVBfIM0aGu0roXWsGxCyodq56khQzpdEN/N43gpI68UqbgsdL9X3yZ8EL6RCQqIVFhmtRqOm6yfq4mYscjQQ9TaOu34wK1w5yovH9FSVN/tIb7S0YEPobJoQpgOnd7I9VbRYzWi0XuU15tGvsPmUmd0ecX2OIGwgdU72x6nd1Zn1Igddrj6xt2CdboejRbX9vAoZYMqDuFem2ZQygZmt3aHt8WtkbZjjd3JwdXnbN+9BoYG9Sq/eIQZe+d4Fa5uE6pp6EGh+L6lOpSoZpJnym13QgfYgomRGdhEt31aaM2mkbU4oGrfxrmFiZaQddQ1hWrbk25BaB25DfTNgMYd3tYW1pO3banN63YDe4cWG7iaKVz5uVMP1PFdBtyhR4xsVxLvuwl4qdXvV29TEg7JgX01XcCFKDztlBf5Ju9/aBACp+TJHvSRzcC+8sxanRcW6hETQs0p6mOS0l1EWS3djAghkotBU4NGEI6uy4UdWNCdYIFhDFAQTa6+qnx350jmJYPzKgMVDaSiLNg8IcxV2g6ykgcVmR/pzauBMiB2/0KzHQuz3/UTgUf5Zg42m5FziCR98KyBa51ODi+PKb0fr1dsuOdmjx6q8sGBVAjTOUAXaIMM7YLcpSLYqKELEZaPofBVPGpozEXXu2wDP6bEO1VsSJRa86wGInIpy3pBxNcU4JHqC8FwAgcy0H8r2XOgog+EyutZb72TmctabyMcywHAUv0ZBkff69qTiUa372yIHqvT5RTgiyY5fGk+uDCgYOZwX5hjC5v1PmX4r8s101Fmd+hENm8LklyapWP9+x1yVX1cNI7jDQ30ezrwMGYvV9O7rsgW9uWVbaMcsrpIniev7gW+tA1u/zODtUOJ1M9s6mQyVR55F4yo2FRHP4OjfHVWBX9PwEzRMKh6r1SPwtvwgY2bGOP16QrZ2qMzk5yfcbHIZoNJfc6FRi3c4IObD/4+ZnII1XkXXY7DcpAtbbDsnYMB0QiyoL+hQfjMfWmy9d7su3Q09rH9qe7MK/uLJJOGwRYMicMwB3qC+K89NvDk4hri/wU5GnkDLjJOopTld/g8Ls+/lB/nSfyU/edjRLrk+fexDdJKU7TRoG90c76xWNo2yIj0CQ2Sz16RlfOaKVYHRHnvLbvTO4egklTi1ia6Hbw2UofSATaAJThYrFoI+1KxKJVWWTGhA3fNCzQ/Yk/J4S7bZ/kB8ioDK7wQIQdpHUzjAH1gLNRYddowBcnFZ2Rr2/QHLsR/vQ==\" theme=\"auto\"></Presentation>",
      "image": "https://img.tucang.cc/api/image/show/72e720a5032441381e8d626f0e6538f1",
      "date_published": "2023-07-07T06:08:45.000Z",
      "date_modified": "2023-07-07T06:08:45.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Python操作Polygon",
      "url": "https://lianghexiang.github.io/space/posts/python/polygon%E9%9D%A2%E7%A7%AF%E8%AE%A1%E7%AE%97.html",
      "id": "https://lianghexiang.github.io/space/posts/python/polygon%E9%9D%A2%E7%A7%AF%E8%AE%A1%E7%AE%97.html",
      "content_html": "<h1 id=\"python操作polygon\" tabindex=\"-1\"> Python操作Polygon</h1>\n<h3 id=\"_1-polygon面积计算\" tabindex=\"-1\"> 1. Polygon面积计算</h3>\n<blockquote>\n<p>首先介绍什么是Polygon，在地理信息系统(GIS)中，polygon是经纬度构成的多边形，可以用来描绘地理边界，区域和建筑物轮廓灯。在mysql中，可以使用polygon数据类型存储，Python的<code>Shapely</code>库提供了操作polygon数据的工具。</p>\n</blockquote>\n<p>在编程语言中，polygon数据多存储在二维列表中，例如<code>[[1, 2],[2, 0], [0, 1],......]</code>,  在数学中计算不规则多边形面积之一的公式是鞋带公式(也成高斯面积公式)</p>\n<p>对于任意一个多边形，如果已知其各个顶点的坐标，</p>\n<p>那么这个多边形的面积为：</p>\n<p>其中y(i+1)=y1, x(i+1)=x1</p>\n<p><a href=\"https://blog.csdn.net/xza13155/article/details/112118676\" target=\"_blank\" rel=\"noopener noreferrer\">https://blog.csdn.net/xza13155/article/details/112118676</a></p>\n<p>把上述公式转换成Python计算polygon边界面积的代码：</p>\n<div data-ext=\"py\"><pre><code><span>def</span> <span>polygon_area</span><span>(</span>polygon<span>)</span><span>:</span>\n    <span>\"\"\"\n    :param polygon: 多边形坐标 list\n    :return: 多边形面积 float\n    \"\"\"</span>\n    length <span>=</span> <span>len</span><span>(</span>polygon<span>)</span>\n    area <span>=</span> <span>0.0</span>\n    <span>for</span> i <span>in</span> <span>range</span><span>(</span>length<span>)</span><span>:</span>\n        x1<span>,</span> y1 <span>=</span> polygon<span>[</span>i<span>]</span>\n        <span># 如果xn为最后一项，则为xn*y1-yn*x1</span>\n        x2<span>,</span> y2 <span>=</span> polygon<span>[</span><span>(</span>i<span>+</span><span>1</span><span>)</span> <span>%</span> length<span>]</span>\n        area <span>+=</span> <span>(</span>x1<span>*</span>y2 <span>-</span> y1<span>*</span>x2<span>)</span>\n    area <span>=</span> <span>abs</span><span>(</span>area<span>)</span> <span>*</span> <span>0.5</span>\n    <span>return</span> area\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>如果使用第三方库shapely：</p>\n<div data-ext=\"py\"><pre><code><span>from</span> shapely<span>.</span>geometry <span>import</span> Polygon\n<span>def</span> <span>gis_polygon_area</span><span>(</span>coordinates<span>)</span><span>:</span>\n    polygon <span>=</span> Polygon<span>(</span>coordinates<span>)</span>\n    area <span>=</span> polygon<span>.</span>area\n    <span>return</span> area\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div>",
      "image": "https://img.tucang.cc/api/image/show/72e720a5032441381e8d626f0e6538f1",
      "date_published": "2023-07-01T00:00:00.000Z",
      "date_modified": "2023-07-07T06:08:45.000Z",
      "authors": [],
      "tags": [
        "python"
      ]
    }
  ]
}